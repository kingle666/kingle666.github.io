{"meta":{"title":"kingle","subtitle":null,"description":null,"author":"kingle","url":"https://kingle.我爱你"},"pages":[{"title":"Repositories","date":"2018-09-05T04:05:54.357Z","updated":"2018-07-31T09:55:53.000Z","comments":false,"path":"index.html","permalink":"https://kingle.我爱你/index.html","excerpt":"","text":""}],"posts":[{"title":"mysql 问题总结","slug":"mysql-问题总结","date":"2018-09-07T09:58:57.000Z","updated":"2018-09-07T10:00:53.264Z","comments":true,"path":"2018/09/07/mysql-问题总结/","link":"","permalink":"https://kingle.我爱你/2018/09/07/mysql-问题总结/","excerpt":"","text":"###一、Can’t connect to MySQL server on ‘localhost’ (10061) 不能连接到 localhost 上的mysql分析：这说明“localhost”计算机是存在的，但在这台机器上却没提供MySQL服务。需要启动这台机器上的MySQL服务,如果机子负载太高没空相应请求也会产生这个错误。解决:既然没有启动那就去启动这台机子的mysql。如果启动不成功，多数是因为你的my.ini配置的有问题。重新配置其即可。如果觉得mysql负载异常，可以到mysql/bin 的目录下执行mysqladmin -uroot -p123 processlist来查看mysql当前的进程。 ###二、Unknown MySQL Server Host ‘localhosadst’ (11001) 未知的MySQL服务器 localhosadst分析：服务器 localhosasdst 不存在。或者根本无法连接解决：仔细检查自己论坛下面的 ./config.inc.php 找到$dbhost重新设置为正确的mysql 服务器地址。 ###三、Access denied for user: ‘roota@localhost’ (Using password: YES) 用户 roota 访问 localhost 被拒绝（没有允许通过）分析：造成这个错误一般数据库用户名和密码相对mysql服务器不正确解决：仔细检查自己论坛下面的 ./config.inc.php 找到dbuser、 dbpw核实后重新设置保存即可。 ###四、Access denied for user: ‘red@localhost’ to database ‘newbbs’ 用户 red 在localhost 服务器上没有权限操作数据库newbbs分析：这个提示和问题三是不同的。那个是在连接数据库的时候就被阻止了，而这个错误是在对数据库进行操作时引起的。比如在select update等等。这个是因为该用户没有操作数据库相应的权力。比如select 这个操作在mysql.user.Select_priv里记录 Y 可以操作N 不可以操作。解决：如果是自己的独立主机那么更新mysql.user 的相应用户记录，比如这里要更新的用户为red 。或者直接修改 ./config.inc.php 为其配置一个具有对数据库操作权限的用户或者通过如下的命令来更新授权grant all privileges on dbname.* to ‘user‘@’localhost’ identified by ‘password’提示：更新了mysql库中的记录一定要重启mysql服务器才能使更新生效FLUSH PRIVILEGES; ###五、No Database Selected 没有数据库被选择上分析：产生的原因有两种config.inc.php 里面dbname设置的不对。致使数据库根本不存在，所以在db-&gt;select_db(dbname);时返回了false和上面问题四是一样的，数据库用户没有select权限，同样会导致这样的错误。当你发现config.inc.php的设置没有任何问题，但还是提示这个错误，那一定就是这种情况了。解决：对症下药打开config.inc.php找到 dbname核实重新配置并保存同问题四的解决方法 ###六、Can’t open file: ‘xxx_forums.MYI’. (errno: 145) 不能打开xxx_forums.MYI问题分析：这种情况是不能打开 cdb_forums.MYI 造成的，引起这种情况可能的原因有：1、服务器非正常关机，数据库所在空间已满，或一些其它未知的原因，对数据库表造成了损坏。2、类 unix 操作系统下直接将数据库文件拷贝移动会因为文件的属组问题而产生这个错误。解决方法：1、修复数据表可以使用下面的两种方式修复数据表：（第一种方法仅适合独立主机用户）1）使用 myisamchk ，MySQL 自带了专门用户数据表检查和修复的工具 —— myisamchk 。更改当前目录到 MySQL/bin 下面，一般情况下只有在这个下面才能运行 myisamchk 命令。常用的修复命令为：myisamchk -r 数据文件目录/数据表名.MYI；2）通过 phpMyAdmin 修复， phpMyAdmin 带有修复数据表的功能，进入到某一个表中后，点击“操作”，在下方的“表维护”中点击“修复表”即可。注意：以上两种修复方式在执行前一定要备份数据库。2、修改文件的属组（仅适合独立主机用户）1）复制数据库文件的过程中没有将数据库文件设置为 MySQL 运行的帐号可读写（一般适用于 Linux 和 FreeBSD 用户）。 ###七、Table ‘test.xxx_sessions’ doesn’t exist xxxxx表不存在分析：在执行sql语句时没有找到表，比如：SELECT * FROM xxx_members WHERE uid=’XX’ 这里如果表xxx_members不存在于$dbname库里，那么就会提示这个错误。具体可分为以下三种情况来讨论：安装插件或者hack时修改了程序文件，而忘记了对数据库作相应的升级。后台使用了不完全备份，导入数据时没有导入到已经安装了相应版本的论坛的数据库中。解决： 同样对症下药，不同的原因不同的处理方法。仔细对照插件作者提供的安装说明，把遗漏的对数据库的操作补上，如果仍然不能解决问题，那么应该怀疑该插件的可用性了。去咨询一下插件作者，或者将其卸载。不要张冠李戴，多大的脚就穿多大的鞋。总之使得程序文件和数据库配套即可. ###八、Unknown column ‘column_name’ in ‘field list’ 未知的字段名 column_name分析：在执行sql语句是出现了指定表中没有的字段名称，就会出现这个错误。具体导致的原因可分为以下两种安装插件或者hack时修改了程序文件，而忘记了对数据库作相应的升级。程序文件和数据库不配套，比如d2.5的数据库配置给d4.1的程序来用肯定会出现这个错误。解决： 导致的原因和问题八的1和 3是相同的，所以解决方法也一样。 ###九、You have an error in your SQL syntax 有一个语法错误在你的sql中分析：论坛标准的程序是没有sql语法错误的。所以造成这个错误的原因一般就两类安装插件或擅自修改程序。不同的数据库版本数据库导出导入，比如MySQL4.1的数据在导出的语句包含了MySQL4.0没有的功能，像字符集的设定，这时如果将这些sql导入到MySQL4.0的时候就会产生sql语法错误。解决：仔细检查看到底是哪里的错误，将其修正，实在不行就用标准程序把出错的程序替换。在数据库备份的时候要留意，如果不打算倒入到其他版本的mysql中则不用特殊考虑，反之要特殊的设定。使用DZ4.1的后台数据备份，可以按照提示去设定想要的格式。独立主机的也可以在到处的时候将其导出为mysql4.0的格式。mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt databse &gt; test.sql ###十、Duplicate entry ‘xxx’ for key 1 插入 xxx 使索引1重复分析：索引如果是primary unique这两两种，那么数据表的数据对应的这个字段就必须保证其每条记录的唯一性。否则就会产生这个错误。一般发生在对数据库写操作的时候，例如Discuz!4.1论坛程序要求所有会员的用户名username必须唯一，即username的索引是 unique，这时如果强行往cdb_members表里插入一个已有的username的记录就会发上这个错误，或者将一条记录的username更新 为已有的一个username。改变表结构的时候也有可能导致这个错误。例如 Discuz!4.0论坛的数据库中cdb_members.username 的索引类型是index这个时候是允许有相同username的记录存在的，在升级到4.1的时候，因为要将username的索引由原来的index变 为unique。如果这时cdb_members里存在有相同的username的记录，那么就会引发这个错误。导出数据据时有时会因为一些原因（作者目前还不清楚）导致同一条记录被重复导出，那么这个备份数据在导入的时候出现这个错误是在所难免的了。修改了auto_increment的值，致使“下一个 Autoindex”为一条已经存在的记录解决： 两种思路，一是破坏掉唯一性的索引。二是把重复的数据记录干掉，只保留一条。很显然第一种思路是不可取的。那么按照二的思路我们得出以下几种解决方法，对应上面的i ii iii略按照错误提示里的信息到数据库中将重复的记录删除，仅保留一条即可。之后继续执行升级操作。这种情况发生的概率很小，可以用文本编辑器打开备份文档，查找重复的信息。将其多余的拿掉，仅保留一条即可。查询出表中auto_increment最大的一条记录，设置auto_incerment比其大一即可。PS：repaire table “表名“，可以暂时解决问题。 ###十一、 Duplicate key name ‘xxx’ 索引名重复分析：要创建的索引已经存在了，就会引发这个错误，这个错误多发生在升级的时候。可能是已经升级过的，重复升级引起的错误。也有可能是之前用户擅自加的索引，刚好与升级文件中的所以相同了。解决： 看看已经存在的索引和要添加的索引是否一样，一样的话可以跳过这条sql语句，如果不一样那么现删除已存在的所以，之后再执行。 ###十二、 Duplicate column name ‘xxx’ 字段名xxx重复分析：添加的字段xxx已经存在，多发生在升级过程中，与问题十二的产生是一样的。解决： 看一下已经存在的字段是否和将要添加的字段属性完全相同，如果相同则可以跳过不执行这句sql，如果不一样则删除掉这个字段。之后继续执行升级程序。 ###十三、 Table ‘xxx’ already exists 数据表xxx已经存在分析：xxx表已经存在于库中，再次试图创建这个名字的表就会引发这个错误。同样多发生在论坛的升级中。类似于问题十二。解决： 看看已经存在的表是否和将要创建的表完全一样，一样的话可以跳过不执行这个sql，否则请将存在的表先删除，之后继续执行升级文件。 ###十四、 Can’t create database ‘xxx’. Database exists 不能创建数据库xxx，数据库已经存在分析：一个mysql下面的数据库名称必须保证唯一性，否则就会有这个错误。解决：把已经存在的数据库改名或者把将要创建的数据库改名，总之不让他们的名称冲突。 ###十五、 小结（针对问题 11\\12\\13\\14\\15）此类问题错误提示中都暗藏一个关键词duplicate（重复）那么对于mysql数据库来说什么东西是不能重复的呢？数据库 database同一个数据库下数据表 table同一个数据表下字段 column同一个数据表下索引 key同一个数据表在索引唯一（UNIQUE PRIMARY）的情况下记录中的这些字段不可以重复 ###十六、Unknown system variable ‘NAMES’ 未知的系统变量NAMES分析：Mysql版本不支持字符集设定，此时强行设定字符集就会出现这个错误。解决： 将sql语句中的SET NAMES ‘xxx’ 语句去掉 ###十七、 Lost connection to MySQL server during query MySQL服务器失去连接在查询期间分析：远程连接数据库是有时会有这个问题。MySQL服务器在执行一条sql语句的时候失去了连接造成的。解决： 一般不需要怎么去处理，如果频繁的出现那么考虑改善硬件环境。 ###十八、User ‘red’ has exceeded the ‘max_updates’ resource (current value: 500) msql用户red已经超过了’max_updates’（最大更新次数），’max_questions’（最大查询次数），’max_connections’（最大连接数），当前设定为500分析：在mysql数据库的下有一个库为mysql，它其中有一个表为user这里面的纪录每一条都对应为一个mysql用户的授权。其中字段 max_questions max_updates max_connections分别记录着最大查询次数 最大更新数 最大连接数，当目前的任何一个参数大于任何一个设定的值就会产生这个错误。解决： 独立主机用户可以直接修改授权表。修改完之后重启mysql或者跟新授权表，进入mysql提示符下执行FLUSH PRIVILEGES;记得后面要有分号’;’虚拟主机的用户如果总是出现这个问题可找空间商协商解决。 ###十九、Too many connections (1040)链接过多 达到最大连接数问题分析：连接数超过了mysql设置的值，与max_connections 和wait_timeout 都有关系。wait_timeout的值越大，连接的空闲等待就越长，这样就会造成当前连接数越大解决方法：1.虚拟主机用户请联系空间商优化 MySQL 服务器的配置；2.独立主机用户请联系服务器管理员优化 MySQL 服务器的配置，可参考：修改 MySQL 配置文件 my.ini 或者 my.cnf 中的参数：max_connections= 1000wait_timeout = 10修改后重启 MySQL ，如果经常性的报此错误，请做一下服务器的整体优化。 ###二十、There is no such grant defined for user ‘%s’ on host ‘%s’错误编号：1141问题分析：MySQL 当前用户无权访问数据库。解决方法：1、虚拟主机用户请联系空间商，确认给你提供的帐号是否有授权数据库的权限。2、独立主机用户请联系服务器管理员，确认给您提供的数据库帐号是否有管理此数据库的权限。 ###二十一、Error on rename of ‘%s’ to ‘%s’ (errno: %d)error.:1025问题分析：请检查一下您的程序是否有修改数据库表名的语句。解决方法：1.请检查您的程序中哪些地方需要修改数据库表名；2.如果您的实际应用确实需要修改到数据库表名的话，请联系空间商或者服务器管理员给您开放修改库名的权限和服务器本身是否正常。 ###二十二、Error reading file ‘%s’ (errno: %d)error.:1023问题分析：数据库文件不能被读取。解决方法：1.虚拟主机用户请联系空间商查看数据库是否完好。2.独立主机用户请联系服务器管理员检查一下 MySQL 本身是否正常， MySQL 是否可以读取文件，Linux 用户可以检查一下 MySQL 的数据库文件的属主是否正确以及本身的文件是否损坏。 ###二十三、Host ‘*‘ is blocked because of many connection errors; unblock with ‘mysqladmin flush-hosts’error.:1129问题分析：数据库出现异常，请重启数据库。解决方法： 由于存在很多连接错误，主机’**‘被屏蔽，虚拟主机用户请联系空间商处理，独立主机用户请联系服务器管理员，在 MySQL 的命令控制台下执行’mysqladmin flush-hosts’解除屏蔽即可，或者重启 MySQL 数据库 ###二十四、dropping database (can’t delete ‘%s’, errno: %d)error.:1009问题分析：不能删除数据库文件，导致删除数据库失败。解决方法：1.检查您使用的数据库管理帐号是否有权限删除数据。2.检查数据库是否存在。 ###二十五、Got error 28 from table handlererror.:1030问题分析：数据库所在磁盘空间已满。解决方法：1.虚拟主机用户请联系空间商增加 MySQL 所在的磁盘空间或者清理一些无用文件；2.独立主机用户请联系服务器管理员增加 MySQL 所在的磁盘空间或者清理一些无用文件 ###二十六、Can’t create a new thread; if you are not out of available memory, you can consult the manual for a possible OS-dependent bug。error.:11/35问题分析：数据库服务器问题，数据库操作无法创建新线程。一般是两个原因：1.服务器系统内存溢出。2.环境软件损坏或系统损坏。解决方法：1.虚拟主机用户请联系下空间商数据库服务器的内存和系统是否正常。2.独立主机用户请联系服务器管理员检查服务器的内存和系统是否正常，如果服务器内存紧张，请检查一下哪些进程消耗了服务器的内存，同时考虑是否增加服务器的内存来提高整个的负载能力。 ###二十七、Error: Client does not support authentication protocol requested by server; consider upgrading MySQL clienterror.:1251问题分析：如果你升级 MySQL 到 4.1 以上版本后遇到以上问题,请先确定你的 MySQL Client 是 4.1 或者更高版本( Windows 下有问题你就直接跳到下面看解决方法了，因为 MySQL 在 Windows 是 client 和 server 一起装上了的)。解决方法： Windows 平台主要是改变连接 MySQL 的帐户的加密方式，MySQL 4.1/5.0 是通过 PASSWORD 这种方式加密的。可以通过以下两种方法得到解决：1) mysql-&gt;SET PASSWORD FOR ‘some_user‘@’some_host’=OLD_PASSWORD(‘new_password’);2) mysql-&gt;UPDATE mysql.user SET Password=OLD_PASSWORD(‘new_password’) WHERE Host=’some_host’ AND User=’some_user’; Linux/Unix 平台Linux 平台下首先确定是否安装过 MySQL 的客户端，这个用 rpm 安装很简单，Linux 代码为：rpm -ivh MySQL-client-4.1.15-0.i386.rpm然后在编译 php 的时候要加上：–with-mysql=/your/path/to/mysql一般情况下都可以解决。如果还出现这种错误，可以按照下面的方法来做：mysql-&gt;SET PASSWORD FOR ‘some_user‘@’some_host’=OLD_PASSWORD(‘new_password’);mysql-&gt;UPDATE mysql.user SET Password=OLD_PASSWORD(‘new_password’) WHERE Host=’some_host’ AND User=’some_user’; ###二十八、Error: Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’error.:2002问题分析：出现这个错误一般情况下是因为下面两个原因：1.MySQL 服务器没有开启。2.MySQL 服务器开启了，但不能找到 socket 文件。解决方法：1.虚拟主机用户，请联系空间商确认数据库是否正常启动。2.独立主机用户，请检查一下 MySQL 服务是否已经开启，没有开启，请启动 MySQL 服务；如果已经开启，并且是 Linux 系统，请检查一下 MySQL 的 socket 的路径，然后打开 config.inc.php 找到dbhost=′localhost′;在hostname后面加冒号‘:′和MySQL的socket的路径。比如MySQL服务器为localhostMySQL的socket的路径为/tmp/mysql.sock那么就改成如下： dbhost = ‘localhost:/temp/mysql.sock’; ###二十九、Can’t connect to MySQL server on ‘localhost’error.:2003问题分析：MySQL 服务没有启动，一般是在异常的情况下 MySQL 无法启动导致的，比如无可用的磁盘空间，my.ini 里 MySQL 的 basedir 路径设置错误等。解决方法：1.检查磁盘空间是否还有剩余可用空间，尽量保持有足够的磁盘空间可用。2.检查 my.ini 里的 basedir 等参数设置是否正确，然后重新启动下 MySQL 服务。 ###三十、Lost connection to MySQL server during queryerror.:2013问题分析：数据库查询过程中丢失了与 MySQL 服务器的连接。解决方法：1.请确认您的程序中是否有效率很低的程序，比如某些插件，可以卸载掉插件，检查一下服务器是否正常；2.服务器本身资源紧张，虚拟主机用户请联系空间商确认，独立主机用户请联系服务器管理员，检查一下服务器是否正常。 ###三十一、Got a packet bigger than \\’max_allowed_packet\\’ bytes错误编号：1153问题分析：调整了 Mantis 的上传附件的大小却没有调整 MySQL 的配置文件。解决办法：1、独立主机用户请按照以下方法调整：查找 MySQL 的配置文件（my.cnf 或者 my.ini）在 [mysqld] 部分添加一句（如果存在，调整其值就可以）：max_allowed_packet=10M重启 MySQL 服务就可以了。这里设置的是 10MB。2、虚拟主机用户请联系空间商调整此参数。","categories":[],"tags":[]},{"title":"nginx 配置指令优化","slug":"nginx-配置指令优化","date":"2018-09-06T00:31:56.000Z","updated":"2018-09-06T00:38:56.003Z","comments":true,"path":"2018/09/06/nginx-配置指令优化/","link":"","permalink":"https://kingle.我爱你/2018/09/06/nginx-配置指令优化/","excerpt":"","text":"send_timeout send_timeout 120s; 用于设置nginx服务器响应客户端的超时时间，这个超时时间仅针对两个客户端和服务器之间建立连接后，某次活动之间的时间。如果这个时间后客户端没有任何活动，nginx服务器将会关闭连接 keepalive_timeout keepalive_timeout 160s 指定客户端连接保持的超时时间，该设置表示nginx服务器与客户端保持活动时间是60s，60s后服务器与客户端断开连接 client_header_buffer_size client_header_buffer_size 4k; 设置nginx 服务器允许的客户端请求头部的缓冲区大小，默认为1KB。此指令的赋值可以根据系统分页大小来设置。分页大小也可以用”# getconf PAGESIZE”命令取得 有过nginx服务器工作经验的朋友可能会遇到nginx 服务器返回400错误的情况，查找nginx服务器的400错误原因比较困难，因为此错误并不是每次都会出现，出现错误的时候，通常在浏览器和日志里也看不到任何有关提示信息。 根据实际经验来看，有很大一部分情况是客户端的请求头部过大造成的。请求头部过大，通常是客户端cookie中写入了较大的值引起的。于是适当增大此指令的赋值，允许nginx服务器接收较大的请求头部，可以改善服务器对客户端 的支持能力。一般将此指令设置为4KB. client_header_timeout client_header_timeout 20s; 设置读取客户端请求头数据的超时时间。此处值是15s,为经验参考值，默认是60s。 如果超过这个时间，客户端还没有发送完整的header数据，服务端将返回”Request timeout(408)”错误， multi_accept 配置nginx服务器时候经可能多的接受客户端的网络连接请求,默认off 驱动相关指定 use 参数详解：use指令用于指定Nginx服务器使用的事件驱动模型 worker_connections 该指令用于设置Nginx服务器的每个工作进程允许同时连接客户端的最大数量，语法为 worker_connections number; 结合worker_processes 指令，我们可以计算出Nginx 服务器允许同时练级的客户端最大数量 Client=worker_processes * worker_connections / 2 。 在看一本书的过程中看到作者 在使用Nginx服务器的过程中遇到无法访问Nginx 服务器的情况。查看日志信息发现一直报如下错误 他是怎么分析解决的呢： 根据报错信息，推测可能是Nginx 服务器的最大访问链接数量设置小了。此指令设置的就是Nginx服务器能接受的最大访问量，其中包括前端用户链接也包括其他链接，这个值在理论上等于此指令的值与它允许开启的工作进程最大数的乘积。 此指令一般为65535； worker_connections 65535; 此指令的赋值与linux 操作系统中进程可以打开 的文件句柄数量有关系。按照以上设置修改了赋值以后，Nginx 服务器报如下错误： 究其原因，在linux 系统中有一个系统指令open file resource limit ，它设置了进程可以打开的文件句柄数量，worker_connections 指令的赋值不能超过 open file resource limit 的赋值可以使用以下的命令查看 linux 系统中 该指令的值 # cat /proc/sys/fs/file-max 可以通过下面命令将open file resource limit 指令的值设为 2390251： # echo &quot;2390251&quot; &gt; /proc/sys/fs/file-max; sysctl -p 这样Nginx 的worker_connections 指令赋值65535 就没问题了 worker_rlimit_sigpending 参数详解：该指令用于设置linux 2.6.6-mm2 版本之后的 linux 平台的事件信号队列长度上线。其语法结构为 worker_rlimit_sigpending limit; 注：limit 为linux 平台事件信号队列的长度上限值。 该指令主要影响事件驱动模型中rtsig 模型可以保存的最大信号数。Nginx 服务器的每一个工作进程有自己的事件信号队列用于存储客户端请求发生的信号，如果超过长度上限，nginx 服务器自动转用poll 模型处理未处理的客户端请求，为了保证Nginx 服务器对客户端请求的高效处理，请大家根据实际的客户端并发请求数量和服务器运行环境能力设定该值，设置示范 worker_rlimit_sifpending 1024; devpoll_changes 和 devpoll_events 参数详解：这两个指令用于设置在 /dev/poll 事件驱动模式下，Nginx服务器可以与内核之间传递事件的数量，前者设置传递给内核的事件数量，后者设置从内核获取的事件数量，语法结构为： devpoll_changes number; devpoll_events number; 注：number 为要设置的数量，默认值为32. kqueue_changes 和 kqueue_events 参数详解：这两个指令用于设置在kqueue 时间驱动模式下，Nginx 服务器可以与内核之间传递事件的数量，前者设置传递给内核的事件数量，后者设置从内核获取的事件数量，其语法结构为： kqueue_changes number; kqueue_events number; 注：number 为要设置的数量，默认值均为512。 epoll_events 参数详解：该指令用于设置在epoll 事件驱动模式下Nginx 服务器可以与内核之间传递事件的数量，与其他事件驱动模型不同，在epoll事件驱动模式下Nginx 服务器向内核传递事件的数量和从内核传递事件数量是相等得。因此没有类似epoll_changes 这样的指令,默认值为512. epoll_events 512; rtsig_signo 该指令用于设置rtsig模式使用两个信号中的第一个, rtsig_signo signo rtsig_overfloe_* number 用于代表三个具体的指令 分别是:rtsig_overflow_events rtsig_overflow_test rtsig_over_thresold rtsig_overflow_events:指定对垒米处时使用poll库处理的事件数 rtsig_overflow_test: 指定poll库处理地几件事见后将清空rtsig模型使用的信号队列,默认32 rtsig_over_thresold: 指定rtsig模式使用的信号队列中的时间超过多少时就清空队列","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://kingle.我爱你/tags/nginx/"}]},{"title":"nginx 内核优化","slug":"nginx-内核优化","date":"2018-09-06T00:31:44.000Z","updated":"2018-09-06T00:32:40.289Z","comments":true,"path":"2018/09/06/nginx-内核优化/","link":"","permalink":"https://kingle.我爱你/2018/09/06/nginx-内核优化/","excerpt":"","text":"1）nginx进程数，建议按照cpu数目来指定，一般跟cpu核数相同或为它的倍数。worker_processes 8; 2）为每个进程分配cpu，上例中将8个进程分配到8个cpu，当然可以写多个，或者将一个进程分配到多个cpu。worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000; 3）下面这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是系统的最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n的值保持一致。worker_rlimit_nofile 65535; 4）使用epoll的I/O模型，用这个模型来高效处理异步事件use epoll; 5）每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为worker_processes*worker_connections。worker_connections 65535; 6）http连接超时时间，默认是60s，功能是使客户端到服务器端的连接在设定的时间内持续有效，当出现对服务器的后继请求时，该功能避免了建立或者重新建立连接。切记这个参数也不能设置过大！否则会导致许多无效的http连接占据着nginx的连接数，终nginx崩溃！keepalive_timeout 60; 7）客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。client_header_buffer_size 4k; 8）下面这个参数将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。open_file_cache max=102400 inactive=20s; 9）下面这个是指多长时间检查一次缓存的有效信息。open_file_cache_valid 30s; 10）open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。open_file_cache_min_uses 1; 11）隐藏响应头中的有关操作系统和web server（Nginx）版本号的信息，这样对于安全性是有好处的。server_tokens off; 12）可以让sendfile()发挥作用。sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。sendfile()是立即将数据从磁盘读到OS缓存。因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效(更多有关于sendfile)。sendfile on; 13）告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。就是说数据包不会马上传送出去，等到数据包最大时，一次性的传输出去，这样有助于解决网络堵塞。tcp_nopush on; 14）告诉nginx不要缓存数据，而是一段一段的发送–当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。tcp_nodelay on;比如：http {server_tokens off;sendfile on;tcp_nopush on;tcp_nodelay on;……} 15）客户端请求头部的缓冲区大小，这个可以根据系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。client_header_buffer_size 4k;客户端请求头部的缓冲区大小，这个可以根据系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。[root@test-huanqiu ~]# getconf PAGESIZE4096但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。 16）为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。open_file_cache max=65535 inactive=60s; 17）open_file_cache 指令中的inactive 参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive 时间内一次没被使用，它将被移除。open_file_cache_min_uses 1; 18）指定多长时间检查一次缓存的有效信息。open_file_cache_valid 80s;人生就像一滴水，非要落下才后悔！ –kingle","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://kingle.我爱你/tags/nginx/"}]},{"title":"nginx 模块介绍","slug":"nginx-模块介绍","date":"2018-09-06T00:30:58.000Z","updated":"2018-09-07T02:19:21.073Z","comments":true,"path":"2018/09/06/nginx-模块介绍/","link":"","permalink":"https://kingle.我爱你/2018/09/06/nginx-模块介绍/","excerpt":"","text":"性能相关配置worker_processes number | auto；worker进程的数量；通常应该为当前主机的cpu的物理核心数worker_cpu_affinity auto [cpumask] #将work进程绑定在固定cpu上提高缓存命中率例：worker_cpu_affinity 0001 0010 0100 1000;worker_cpu_affinity 0101 1010;worker_priority number指定worker进程的nice值，设定worker进程优先级： [-20,20]worker_rlimit_nofile numberworker进程所能够打开的文件数量上限,默认较小，生产中需要调大如65535 时间驱动events相关的配置worker_connections number每个worker进程所能够打开的最大并发连接数数量，如10240总最大并发数： worker_processes * worker_connectionsuse method指明并发连接请求的处理方法,默认自动选择最优方法不用调整如：use epoll; accept_mutex on | off 互斥；处理新的连接请求的方法； on指由各个worker轮流处理新请求， Off指每个新请求的到达都会通知(唤醒)所有的worker进程，但只有一个进程可获得连接，造成“惊群”，影响性能，默认on http核心模块相关配置ngx_http_core_module 3.1web服务模板server { … }配置一个虚拟主机server { listen address[:PORT]|PORT; server_name SERVER_NAME; root /PATH/TO/DOCUMENT_ROOT;}注意：(1) 基于port；listen PORT; 指令监听在不同的端口(2) 基于ip的虚拟主机listen IP:PORT; IP 地址不同(3) 基于hostnameserver_name fqdn; 指令指向不同的主机名 3.2套接字相关配置listen address[:port] [default_server] [ssl] [http2 | spdy] [backlog=number] [rcvbuf=size] [sndbuf=size] default_server 设定为默认虚拟主机ssl 限制仅能够通过ssl连接提供服务backlog=number 超过并发连接数后，新请求进入后援队列的长度rcvbuf=size 接收缓冲区大小sndbuf=size 发送缓冲区大小 3.3 server_nameserver_name name …;支持通配任意长度的任意字符server_name .magedu.com www.magedu.支持~起始的字符做正则表达式模式匹配，性能原因慎用server_name ~^www\\d+.magedu.com$ #\\d 表示 [0-9]匹配优先级机制从高到低：(1) 首先是字符串精确匹配 如： www.magedu.com(2) 左侧通配符 如： .magedu.com(3) 右侧通配符 如： www.magedu.(4) 正则表达式 如： ~^..magedu.com$(5) default_server 3.4 延迟发送选项 tcp_nodelay on | off;tcp_nopush on | off;在keepalived模式下的连接是否启用TCP_NODELAY选项当为off时，延迟发送，合并多个请求后再发送默认On时，不延迟发送可用于： http, server, location 3.5 sendfile sendfile on | off;是否启用sendfile功能，在内核中封装报文直接发送默认Off 3.6 隐藏版本信息 server_tokens on | off | build | string是否在响应报文的Server首部显示nginx版本 3.7 location匹配 location [ = | ~ | ~ | ^~ ] uri { … }location @name { … }在一个server中location配置段可存在多个，用于实现从uri到文件系统的路径映射； ngnix会根据用户请求的URI来检查定义的所有location，并找出一个最佳匹配，而后应用其配置示例：server {… server_name www.magedu.com; location /images/ { root /data/imgs/; }}http://www.magedu.com/images/logo.jpg–&gt; /data/imgs/images/logo.jpg=：对URI做精确匹配；^~：对URI的最左边部分做匹配检查，不区分字符大小写 ~：对URI做正则表达式模式匹配，区分字符大小写 ~：对URI做正则表达式模式匹配，不区分字符大小写 不带符号：匹配起始于此uri的所有的uri 匹配优先级从高到低：=, ^~, ～/～*, 不带符号 3.7 路径别名alias path 示例：http://www.magedu.com/bbs/index.phplocation /bbs/ { alias /web/forum/;} –&gt; /web/forum/index.htmllocation /bbs/ { root /web/forum/;} –&gt; /web/forum/bbs/index.html 注意： location中使用root指令和alias指令的意义不同(a) root，相当于追加在root目录后面(b) alias，相当于对location中的url进行替换 3.8 错误页面显示error_page code … [=[response]] uri;模块： ngx_http_core_module定义错误页， 以指定的响应状态码进行响应可用位置： http, server, location, if in locationerror_page 404 /404.htmlerror_page 404 =200 /404.html #防止404页面被劫持 3.9 长连接相关配置keepalive_timeout timeout [header_timeout];设定保持连接超时时长， 0表示禁止长连接， 默认为75skeepalive_requests number;在一次长连接上所允许请求的资源的最大数量，默认为100keepalive_disable none | browser …对哪种浏览器禁用长连接send_timeout time;向客户端发送响应报文的超时时长，此处是指两次写操作之间的间隔时长，而非整个响应过程的传输时长 3.10 请求报文缓存client_body_buffer_size size;用于接收每个客户端请求报文的body部分的缓冲区大小；默认为16k；超出此大小时，其将被暂存到磁盘上的由client_body_temp_path指令所定义的位置client_body_temp_path path [level1 [level2 [level3]]];设定用于存储客户端请求报文的body部分的临时存储路径及子目录结构和数量目录名为16进制的数字；client_body_temp_path /var/tmp/client_body 1 2 21 1级目录占1位16进制，即2^4=16个目录 0-f2 2级目录占2位16进制，即2^8=256个目录 00-ff2 3级目录占2位16进制， 即2^8=256个目录 00-ff 3.11 对客户端进行限制相关配置limit_rate rate;限制响应给客户端的传输速率，单位是bytes/second 默认值0表示无限制limit_except method … { … }，仅用于location限制客户端使用除了指定的请求方法之外的其它方法method:GET, HEAD, POST, PUT, DELETE，MKCOL, COPY, MOVE, OPTIONS, PROPFIND,PROPPATCH, LOCK, UNLOCK, PATCH例：limit_except GET { allow 192.168.1.0/24; deny all;}除了GET和HEAD 之外其它方法仅允许192.168.1.0/24网段主机使用 访问控制模块ngx_http_access_module 实现基于ip的访问控制功能allow address | CIDR | unix: | all;deny address | CIDR | unix: | all;http, server, location, limit_except自上而下检查，一旦匹配，将生效，条件严格的置前示例：location / { deny 192.168.1.1; allow 192.168.1.0/24; allow 10.1.1.0/16; allow 2001:0db8::/32; deny all;} 用户认证模块ngx_http_auth_basic_module 实现基于用户的访问控制，使用basic机制进行用户认证auth_basic string | off;auth_basic_user_file file;location /admin/ { auth_basic “Admin Area”; auth_basic_user_file /etc/nginx/.ngxpasswd;}用户口令：1、明文文本：格式name:password:comment2、加密文本：由htpasswd命令实现 httpd-tools所提供htpasswd [-c第一次创建时使用] [-D删除用户] passwdfile username 状态查看模块ngx_http_stub_status_module用于输出nginx的基本状态信息Active connections:当前状态，活动状态的连接数accepts：统计总值，已经接受的客户端请求的总数handled：统计总值，已经处理完成的客户端请求的总数requests：统计总值，客户端发来的总的请求数Reading：当前状态，正在读取客户端请求报文首部的连接的连接数Writing：当前状态，正在向客户端发送响应报文过程中的连接数Waiting：当前状态，正在等待客户端发出请求的空闲连接数示例：location /status { stub_status; allow 172.16.0.0/16; deny all;} 日志记录模块ngx_http_log_module1、 log_format name string …;string可以使用nginx核心模块及其它模块内嵌的变量2、 access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];access_log off;访问日志文件路径，格式及相关的缓冲的配置buffer=sizeflush=time示例log_format compression ‘$remote_addr-$remote_user [$time_local] ‘ &apos;&quot;$request&quot; $status $bytes_sent &apos; &apos;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$gzip_ratio&quot;&apos;; access_log /spool/logs/nginx-access.log compression buffer=32k;json格式日志示例;log_format json ‘{“@timestamp”:”$time_iso8601”,’ &apos;&quot;client_ip&quot;:&quot;$remote_addr&quot;,&apos; &apos;&quot;size&quot;:$body_bytes_sent,&apos; &apos;&quot;responsetime&quot;:$request_time,&apos; &apos;&quot;upstreamtime&quot;:&quot;$upstream_response_time&quot;,&apos; &apos;&quot;upstreamhost&quot;:&quot;$upstream_addr&quot;,&apos; &apos;&quot;http_host&quot;:&quot;$host&quot;,&apos; &apos;&quot;method&quot;:&quot;$request_method&quot;,&apos; &apos;&quot;request_uri&quot;:&quot;$request_uri&quot;,&apos; &apos;&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&apos; &apos;&quot;referrer&quot;:&quot;$http_referer&quot;,&apos; &apos;&quot;agent&quot;:&quot;$http_user_agent&quot;,&apos; &apos;&quot;status&quot;:&quot;$status&quot;}&apos;; 3、 open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time];open_log_file_cache off;缓存各日志文件相关的元数据信息max：缓存的最大文件描述符数量min_uses：在inactive指定的时长内访问大于等于此值方可被当作活动项inactive：非活动时长valid：验正缓存中各缓存项是否为活动项的时间间隔例: open_log_file_cache max=1000 inactive=20s valid=1m; 压缩相关选项ngx_http_gzip_module1、gzip on off;#启用或禁用gzip压缩2、gzip_comp_level level;#压缩比由低到高： 1 到 9 默认： 13、gzip_disable regex …; #匹配到客户端浏览器不执行压缩4、gzip_min_length length; #启用压缩功能的响应报文大小阈值5、gzip_http_version 1.0 | 1.1; #设定启用压缩功能时，协议的最小版本 默认： 1.16、gzip_buffers number size;支持实现压缩功能时缓冲区数量及每个缓存区的大小默认： 32 4k 或 16 8k7、gzip_types mime-type …;指明仅对哪些类型的资源执行压缩操作；即压缩过滤器默认包含有text/html，不用显示指定，否则出错8、gzip_vary on| off;如果启用压缩，是否在响应报文首部插入“Vary: AcceptEncoding9、 gzip_proxied off | expired| no-cache| no-|private | no_last_modified| no_etag | auth | any …;nginx对于代理服务器请求的响应报文，在何种条件下启用压缩功能off：对被代理的请求不启用压缩expired,no-cache, no-store， private：对代理服务器请求的响应报文首部Cache-Control值任何一个，启用压缩功能示例：gzip on;gzip_comp_level 6;gzip_http_version 1.1;gzip_vary on;gzip_min_length 1024;gzip_buffers 16 8k;gzip_proxied any;gzip_disable “MSIE[1-6].(?!.*SV1)”;gzip_types text/xml text/plain text/css application/javascript application/xml application/json; https模块ngx_http_ssl_module模块：1、 ssl on | off;为指定虚拟机启用HTTPS protocol， 建议用listen指令代替2、 ssl_certificate file;当前虚拟主机使用PEM格式的证书文件3、 ssl_certificate_key file;当前虚拟主机上与其证书匹配的私钥文件4、 ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2];支持ssl协议版本，默认为后三个5、 ssl_session_cache off | none | [builtin[:size]][shared:name:size];builtin[:size]：使用OpenSSL内建缓存，为每worker进程私有[shared:name:size]：在各worker之间使用一个共享的缓存6、 ssl_session_timeout time;客户端连接可以复用ssl session cache中缓存的ssl参数的有效时长，默认5m示例：server { listen 443 ssl; server_name www.magedu.com; root /vhosts/ssl/htdocs; ssl on; ssl_certificate /etc/nginx/ssl/nginx.crt; ssl_certificate_key /etc/nginx/ssl/nginx.key; ssl_session_cache shared:sslcache:20m; ssl_session_timeout 10m;} 重定向模块ngx_http_rewrite_module：1、rewrite regex replacement [flag]将用户请求的URI基于regex所描述的模式进行检查，匹配到时将其替换为replacement指定的新的URI注意：如果在同一级配置块中存在多个rewrite规则，那么会自下而下逐个检查；被某条件规则替换完成后，会重新一轮的替换检查隐含有循环机制,但不超过10次；如果超过，提示500响应码， [flag]所表示的标志位用于控制此循环机制如果replacement是以http://或https://开头，则替换结果会直接以重向返回给客户端[flag]：last：重写完成后停止对当前URI在当前location中后续的其它重写操作，而后对新的URI启动新一轮重写检查；提前重启新一轮循环break：重写完成后停止对当前URI在当前location中后续的其它重写操作，而后直接跳转至重写规则配置块之后的其它配置；结束循环，建议在location中使用redirect：临时重定向，重写完成后以临时重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求；不能以http://或https://开头，使用相对路径，状态码： 302permanent:重写完成后以永久重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求，状态码：301例：rewrite ^/zz/(..html)$ /zhengzhou/$1 break;rewrite ^/zz/(..html)$ https://www.dianping/zhengzhou/$1 permanent;2、 returnreturn code [text];return code URL;return URL;停止处理，并返回给客户端指定的响应码 3、 rewrite_log on | off;是否开启重写日志, 发送至error_log（notice level）4、 set $variable value;用户自定义变量注意：变量定义和调用都要以$开头5、 if (condition) { … }引入新的上下文,条件满足时，执行配置块中的配置指令； server, locationcondition：比较操作符：== 相同!= 不同~：模式匹配，区分字符大小写~：模式匹配，不区分字符大小写!~：模式不匹配，区分字符大小写!~：模式不匹配，不区分字符大小写文件及目录存在性判断：-e, !-e 存在（包括文件，目录，软链接）-f, !-f 文件-d, !-d 目录-x, !-x 执行浏览器分流示例：if ($http_user_agent ~ Chrom) { rewrite ^(.)$ /chrome/$1 break; }if ($http_user_agent ~ MSIE) { rewrite ^(.)$ /IE/$1 break; } 引用模块ngx_http_referer_modulevalid_referers none|blocked|server_names|string …;定义referer首部的合法可用值，不能匹配的将是非法值none：请求报文首部没有referer首部blocked：请求报文有referer首部，但无有效值server_names：参数，其可以有值作为主机名或主机名模式arbitrary_string：任意字符串，但可使用作通配符regular expression：被指定的正则表达式模式匹配到的字符串,要使用~开头，例如： ~..magedu.com示例：valid_referers none block server_names .magedu.com .mageedu.com magedu. mageedu. ~.magedu.;if ($invalid_referer) {return 403;} 反向代理模块ngx_http_proxy_module 12.1 proxy_pass URL;Context:location, if in location, limit_except注意： proxy_pass后面的路径不带uri时，其会将location的uri传递给后端主机server { … server_name HOSTNAME; location /uri/ { proxy_pass http://host[:port]; } …}上面示例： http://HOSTNAME/uri –&gt; http://host/urihttp://host[:port]/ 意味着： http://HOSTNAME/uri –&gt; http://host/注意：如果location定义其uri时使用了正则表达式的模式，则proxy_pass之后必须不能使用uri;用户请求时传递的uri将直接附加代理到的服务的之后server { … server_name HOSTNAME; location ~|~* /uri/ { proxy_pass http://host; 不能加/ } …}http://HOSTNAME/uri/ –&gt; http://host/uri/ 12.2 proxy_set_header field value;设定发往后端主机的请求报文的请求首部的值Context: http, server, location后端记录日志记录真实请求服务器IPproxy_set_header Host $host；proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;标准格式如下：X-Forwarded-For: client1, proxy1, proxy2如后端是Apache服务器应更改日志格式：%h —–&gt; %{X-Real-IP}i 12.3 proxy_cache_path;定义可用于proxy功能的缓存； Context:httpproxy_cache_path path [levels=levels] [use_temp_path=on|off]keys_zone=name:size [inactive=time] [max_size=size][manager_files=number] [manager_sleep=time][manager_threshold=time] [loader_files=number] [loader_sleep=time][loader_threshold=time] [purger=on|off] [purger_files=number][purger_sleep=time] [purger_threshold=time];例：proxy_cache_path /data/nginx/cache（属主要为nginx） levels=1:2 keys_zone=nginxcache:20m inactive=2m 12.4 调用缓存proxy_cache zone | off; 默认off指明调用的缓存，或关闭缓存机制； Context: http,server, location 12.5 proxy_cache_key string;缓存中用于“键”的内容默认值： proxy_cache_key $scheme$proxy_host$request_uri; 12.6proxy_cache_valid [code …] time;定义对特定响应码的响应内容的缓存时长定义在http{…}中示例:proxy_cache_valid 200 302 10m;proxy_cache_valid 404 1m;示例：在http配置定义缓存信proxy_cache_path /var/cache/nginx/proxy_cachelevels=1:1:1 keys_zone=proxycache:20minactive=120s max_size=1g;调用缓存功能，需要定义在相应的配置段，如server{…}；proxy_cache proxycache;proxy_cache_key $request_uri;proxy_cache_valid 200 302 301 1h;proxy_cache_valid any 1m; 12.7proxy_cache_use_stale;proxy_cache_use_stale error | timeout |invalid_header | updating | http_500 | http_502 |http_503 | http_504 | http_403 | http_404 | off …在被代理的后端服务器出现哪种情况下，可以直接使用过期的缓存响应客户端 12.8 proxy_cache_methods GET | HEAD | POST …;对哪些客户端请求方法对应的响应进行缓存， GET和HEAD方法总是被缓存 12.9proxy_hide_header field;By default, nginx does not pass the header fields“Date”, “Server”, “X-Pad”, and “X-Accel-…” from theresponse of a proxied server to a client. 用于隐藏后端服务器特定的响应首部 12.10proxy_connect_timeout time;定义与后端服务器建立连接的超时时长，如超时会出现502错误，默认为60s，一般不建议超出75s 12.11proxy_send_timeout time;把请求发送给后端服务器的超时时长；默认为60s 12.12proxy_read_timeout time;等待后端服务器发送响应报文的超时时长， 默认为60s 首部信息add_header name value [always];添加自定义首部add_header X-Via $server_addr;add_header X-Cache $upstream_cache_status;add_header X-Accel $server_name;add_trailer name value [always];添加自定义响应信息的尾部 hph 相关模块ngx_http_fastcgi_module 14.1fastcgi_pass address;address为后端的fastcgi server的地址可用位置： location, if in location 14.2fastcgi_index name;fastcgi默认的主页资源示例： fastcgi_index index.php; 14.3fastcgi_param parameter value [if_not_empty];设置传递给 FastCGI服务器的参数值，可以是文本，变量或组合 示例1：1）在后端服务器先配置fpm server和mariadb-server2）在前端nginx服务上做以下配置：location ~* .php$ { fastcgi_pass 后端fpm服务器IP:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME/usr/share/nginx/html$fastcgi_script_name; include fastcgi.conf; …} 示例2：通过/pm_status和/ping来获取fpm server状态信息（真实服务器端php-fpm配置文件中将这两项注释掉）location ~* ^/(status|ping)$ { include fastcgi_params; fastcgi_pass 后端fpm服务器IP:9000; fastcgi_param SCRIPT_FILENAME $fastcgi_script_name; include fastcgi.conf;} 14.4 fastcgi 缓存相关fastcgi_cache_path path [levels=levels] [use_temp_path=on|off]keys_zone=name:size [inactive=time] [max_size=size][manager_files=number] [manager_sleep=time] [manager_threshold=time][loader_files=number] [loader_sleep=time] [loader_threshold=time][purger=on|off] [purger_files=number] [purger_sleep=time][purger_threshold=time];定义fastcgi的缓存；path 缓存位置为磁盘上的文件系统max_size=size 磁盘path路径中用于缓存数据的缓存空间上限levels=levels：缓存目录的层级数量，以及每一级的目录数量levels=ONE:TWO:THREE示例： leves=1:2:2keys_zone=name:size k/v映射的内存空间的名称及大小inactive=time 非活动时长 14.5fastcgi_cache zone | off;调用指定的缓存空间来缓存数据可用位置： http, server, location 14.6fastcgi_cache_key string;定义用作缓存项的key的字符串示例： fastcgi_cache_key $request_rui; 14.7fastcgi_cache_methods GET | HEAD | POST …;为哪些请求方法使用缓存 14.8fastcgi_cache_min_uses number;缓存空间中的缓存项在inactive定义的非活动时间内至少要被访问到此处所指定的次数方可被认作活动项 14.9fastcgi_keep_conn on | off;收到后端服务器响应后， fastcgi服务器是否关闭连接，建议启用长连接 14.10fastcgi_cache_valid [code …] time;不同的响应码各自的缓存时长 示例：http {fastcgi_cache_path /var/cache/nginx/fcgi_cachelevels=1:2:1 keys_zone=fcgicache:20m inactive=120s;…server { location ~* .php$ { … fastcgi_cache fcgicache; fastcgi_cache_key $request_uri; fastcgi_cache_valid 200 302 10m; fastcgi_cache_valid 301 1h; fastcgi_cache_valid any 1m;…}} 代理模块ngx_http_upstream_module模块 用于将多个服务器定义成服务器组，而由proxy_pass,fastcgi_pass等指令进行引用 15.1upstream name { … }定义后端服务器组，会引入一个新的上下文默认调度算法是wrrContext: httpupstream httpdsrvs {server …server……} 15.2server address [parameters];在upstream上下文中server成员，以及相关的参数； Context:upstreamaddress的表示格式：unix:/PATH/TO/SOME_SOCK_FILEIP[:PORT]HOSTNAME[:PORT]parameters：weight=number 权重，默认为1max_conns 连接后端报务器最大并发活动连接数， 1.11.5后支持max_fails=number 失败尝试最大次数；超出此处指定的次数时server将被标记为不可用,默认为1fail_timeout=time 后端服务器标记为不可用状态的连接超时时长，默认10sbackup 将服务器标记为“备用”，即所有服务器均不可用时才启用down 标记为“不可用”，配合ip_hash使用，实现灰度发布 15.3ip_hash 源地址hash调度方法 15.4least_conn 最少连接调度算法，当server拥有不同的权重时其为wlc，当所有后端主机连接数相同时，则使用wrr，适用于长连接 15.5hash key [consistent] 基于指定的key的hash表来实现对请求的调度，此处的key可以直接文本、变量或二者组合作用：将请求分类，同一类请求将发往同一个upstreamserver，使用consistent参数， 将使用ketama一致性hash算法，适用于后端是Cache服务器（如varnish）时使用hash $request_uri consistent;hash $remote_addr; 15.6keepalive 连接数N;为每个worker进程保留的空闲的长连接数量,可节约nginx端口，并减少连接管理的消耗 15.7health_check [parameters];健康状态检测机制；只能用于location上下文常用参数：interval=time检测的频率，默认为5秒fails=number：判定服务器不可用的失败检测次数；默认为1次passes=number：判定服务器可用的失败检测次数；默认为1次uri=uri：做健康状态检测测试的目标uri；默认为/match=NAME：健康状态检测的结果评估调用此处指定的match配置块注意：仅对nginx plus有效 15.8match name { … }对backend server做健康状态检测时，定义其结果判断机制；只能用于http上下文常用的参数：status code[ code …]: 期望的响应状态码header HEADER[operator value]：期望存在响应首部，也可对期望的响应首部的值基于比较操作符和值进行比较body：期望响应报文的主体部分应该有的内容注意：仅对nginx plus有效 ngx_stream_core_module模块 模拟反代基于tcp或udp的服务连接，即工作于传输层的反代或调度器 stream { … }定义stream相关的服务； Context:mainstream { upstream telnetsrvs { server 192.168.22.2:23; server 192.168.22.3:23; least_conn; }server { listen 10.1.0.6:23; proxy_pass telnetsrvs; }}listen address:port [ssl] [udp] [proxy_protocol][backlog=number] [bind] [ipv6only=on|off] [reuseport][so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]]; ngx_stream_proxy_module模块可实现代理基于TCP， UDP (1.9.13), UNIX-domainsockets的数据流1 proxy_pass address;指定后端服务器地址2 proxy_timeout timeout;无数据传输时，保持连接状态的超时时长默认为10m3 proxy_connect_timeout time;设置nginx与被代理的服务器尝试建立连接的超时时长默认为60s","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://kingle.我爱你/tags/nginx/"}]},{"title":"nginx 服务器配置指令","slug":"nginx-服务器配置指令","date":"2018-09-05T12:45:25.000Z","updated":"2018-09-06T02:54:39.706Z","comments":true,"path":"2018/09/05/nginx-服务器配置指令/","link":"","permalink":"https://kingle.我爱你/2018/09/05/nginx-服务器配置指令/","excerpt":"","text":"nginx 基础配置 localtion 配置语法结构: location [ = ~ ~* ^~ ] uri{ ... } uri 变量是带匹配的请求字符, 可以是不含正则表达的字符串, 也可以是包含正则的字符串 其中[ ] 中的是可选项 uri 的是必选项: 用来改变请求字符串与uri的匹配方式 = 用于标准uri 前面 , 要求请求字符串与uri严格匹配,如果已经匹配成功,就停止匹配立即处理这个请求 ~ 表示uri包含正则表达式 并且区分大小写 ~* 用于表示uri包含正则表达式 不区分大小写 ^~ 要求找到表示uri和请求字符串匹配度最高的location, 然后处理这个要求 网站错误页面 1xx：指示信息--表示请求已接收，继续处理 2xx：成功--表示请求已被成功接收、理解、接受 3xx：重定向--要完成请求必须进行更进一步的操作 4xx：客户端错误--请求有语法错误或请求无法实现 5xx：服务器端错误--服务器未能实现合法的请求 http消息 代码 含义 以移动 301 请求的数据具有新的位置,而且更改是永久的 重定向 302 请求数据临时位置更改 无法找到网页 400 可以连接到服务器,但是由于地址问题,无法找到网页 网站拒绝显示 404 可以连接到网站但是找不到网页 无法显示该页面 405 可以连接网站,页面内容无法下载,网页编写方式问题 网站无法显示该页面 500 服务器问题 未执行 501 没有讲正在访问的网站设置显示为浏览器所请求的网站 不支持版本 505 请求的协议版本信息 常见: 200 OK //客户端请求成功 400 Bad Request //客户端请求有语法错误，不能被服务器所理解 401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 403 Forbidden //服务器收到请求，但是拒绝提供服务 404 Not Found //请求资源不存在，eg：输入了错误的URL 500 Internal Server Error //服务器发生不可预期的错误 503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常 eg：HTTP/1.1 200 OK （CRLF） 常见的配置文件说明1, error_log file | stderr [debug | info | notice | warn | error | crit | alert | emerg ] debug --- 调试级别 输出日志信息最全 info --- 普通级别 输出提示信息 notice --- 注意级别 输出注意信息 warn --- 警告级别 输出一些无关紧要的错误信息 error --- 错误级别 有影响服务正常运行的错误 crit --- 严重错误级别 严重错误级别 alert --- 十分严重级别 十分严重 emerg --- 超级严重 超级严重 nginx服务器的日志文件输出到某一文件或者输出到标准输出错误输出到stder: 后面则是跟的日志级别可选项, 由低到高分为debug .... emerg 设置级别后联通高级别也会别记录 2, user user group 配置启动程序的用户 用户 组 希望所有能启动则不写 3, worker_processes number | auto number 指定nginx进程做多产生woker peocess数 auto nginx 自动检测进程数 4, pid file 指定pid文件凡在哪里 pid log/nginx.pid 注意设置的时候要配置文件名,不然找不到 5, include file 包含的配置文件,引入其他的配置 6, acept_mutex on | off 设置网络的连接序列化 7, multi_accept on| off 设置是否允许同时接受多个网络连接 8, use method 事件驱动模型的选择 9, worker_connections number 配置允许每一个workr process 最大连接数, 默认是1024 10, mime-type 配置资源类型,mime-type是网络资源的一种媒体类型 格式: default_type mime-type 11, access_log path[format[buffer=size]] 自定义服务器的日志 path: 配置服务器日志文件的存放的路径和名称 format: 可选项,自定义服务器日志的格式字符串 size: 配置临时存放日志的内存缓冲区大小 12, log_format name sting ...; 与access_log联合使用 ,专门用于定义服务器日志的格式 并且可以为格式定义一个名字, 让access_log 方便调用 name : 格式字符串的名字 默认combined string 服务日志的格式字符串 13, sendfile no | off 配置允许sendfile方式传输文件 14, sendfile_max_chunk size 配置nginx进程的每个worker_process每次调用senfile()传输数据量最大不能超过的值 15, keepalive_timeout timeout[header_timeout]; 配置连接超时时间 timeout 服务端对连接的保持时间 header_timeout, 应答报文头部的keeplive域设置超时时间 16, keepalive_repuests number 单链接请求数上限 17, 配置网络监听 配置监听有三种方法: 监听IP地址: listen address[:port] [default_server] [setfib=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [deferred] 监听配置端口: listen port [default_server] [setfib=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_file=filter] 监听socket listen unix:path [default_server] [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_file=filter] [deferred] address : IP地址 port: 端口号 path: socket文件路径 default_server: 标识符,将此虚拟主机设置为address:port默认主机 setfib=number: 目前支队freeBSD有用 以前是0.8.44版本监听scoket关联路由表 backlog=number: 设置监听函数listen()最多永续多少网络连接挂起 freeBSD默认为-1 其他511 rcvbuf=size: 监听socket接受缓存区大小 sndbuf=size: 监听socket发送缓存区大小 deferred :标识符 将accept()设置为Deferred accept_file=filter: 设置监听端口对请求的过滤, 自对freeBSD和netBSd 5.0+的游泳 bind: 标识符 使用独立的bind()处理address:port ssl: 标识符,设置绘画连接使用ssl模式进行 18, server_name name 基于名称的虚拟主机配置 对于多个匹配成功的处理优先级: 准确匹配server_name 通配符在开始时匹配server_name成功 通配符在结尾是匹配server_那么成功 正则表达式匹配server_name成功 在上诉匹配模式中被多次匹配会首先处理首次匹配成的清求 19, root path 配置请求的根目录 web服务器接收到请求后,需要在服务器指定的目录寻找请求资源, 这个路径就是指定文件目录 20, alias path (location模块中使用) 更改location接收到的URI的请求路径 可以跟着变量信息 21, index file ...; 设置网站的默认首页 22, error_page code ...[=[response]] uri 设置错误页面信息 code 要处理的http错误代码 resoonse 可选项 讲code指定的错误代码转化为新的错误代码 uri 错误页面的路径或者网站地址 23, allow address | CIDR |all 配置基于ip的访问允许权限 address 允许访问客户端的ip 不支持设置多个 CIDR 允许访问的客户端的CIDR 如185.199.110.153/24 all 表示所有客户端可以访问 24, deny address | CIDR |all 配置基于ip的访问禁止权限 address 允许访问客户端的ip 不支持设置多个 CIDR 允许访问的客户端的CIDR 如185.199.110.153/24 all 表示所有客户端可以访问 25, auth_basic string |off 配置基于密码的nginx访问权限 string 开启认证功能,并配置验证式的指示信息 off 关闭 26, auth_basic_user_file file 配置基于密码访问nginx访问的权限文件 file文件需要使用绝对路径","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://kingle.我爱你/tags/nginx/"}]},{"title":"nginx 常见问题","slug":"nginx-常见问题","date":"2018-09-05T09:49:18.000Z","updated":"2018-09-05T09:59:14.956Z","comments":true,"path":"2018/09/05/nginx-常见问题/","link":"","permalink":"https://kingle.我爱你/2018/09/05/nginx-常见问题/","excerpt":"","text":"1, 403错误 403是很常见的错误代码，一般就是未授权被禁止访问的意思。 可能的原因有两种：Nginx程序用户无权限访问web目录文件Nginx需要访问目录，但是autoindex选项被关闭 修复方法：授予Nginx程序用户权限读取web目录文件设置autoindex目录为on location /path/to/website/folder {…autoindex on;… } 2, 413错误 在上传时Nginx返回了413错误：“413 Request Entity Too Large”，这一般就是上传文件大小超过Nginx配置引起。 修复方法：在Nginx.conf增加client_max_body_size的设置，这个值默认是1M，可以增加到8M以提高文件大小限制；如果运行的是php，那么还要检查php.ini，这个大小client_max_body_size要和php.ini中的如下值的最大值一致或者稍大，这样就不会因为提交数据大小不一致出现的错误。 post_max_size = 8Mupload_max_filesize = 2M 3, 502错误Nginx 502 Bad Gateway的含义是请求的PHP-CGI已经执行，但是由于某种原因（一般是读取资源的问题）没有执行完毕而导致PHP-CGI进程终止。一般来说Nginx 502 Bad Gateway和php-fpm.conf的设置有关。 修复方法：1、查看FastCGI进程是否已经启动 ps -aux | grep php-cgi 2、检查系统Fastcgi进程运行情况 除了第一种情况，fastcgi进程数不够用、php执行时间长、或者是php-cgi进程死掉也可能造成Nginx的502错误。 运行以下命令判断是否接近FastCGI进程，如果fastcgi进程数接近配置文件中设置的数值，表明worker进程数设置太少。 netstat -anpo | grep “php-cgi” | wc -l 3、FastCGI执行时间过长 根据实际情况调高以下参数值 fastcgi_connect_timeout 300;fastcgi_send_timeout 300;fastcgi_read_timeout 300; 4, 504错误 Nginx 504 Gateway Time-out的含义是所请求的网关没有请求到，简单来说就是没有请求到可以执行的PHP-CGI。 Nginx 504 Gateway Time-out一般与Nginx.conf的设置有关。 头部太大这种情况可能是由于Nginx默认的fastcgi进程响应的缓冲区太小造成的， 这将导致fastcgi进程被挂起，如果你的fastcgi服务对这个挂起处理的不好，那么最后就极有可能导致504 Gateway Time-out。 默认的fastcgi进程响应的缓冲区是8K，可以调大以下参数： fastcgi_buffer_size 128k;fastcgi_buffers 8 128k;fastcgi_busy_buffers_size 由 128K 改为 256K；fastcgi_temp_file_write_size 由 128K 改为 256K。 此外，也可能是php-cgi的问题，需要修改php.ini的配置： 将max_children由之前的10改为30，这样操作是为了保证有充足的php-cgi进程可以被使用。将request_terminate_timeout由之前的0秒改成60秒，这样使php-cgi进程处理脚本的超时时间提高到60秒，可以防止进程被挂起以提高利用效率 5, 域名重复 nginx: [warn] conflicting server name “bbs.kingle.org” on 0.0.0.0:80, ignored 打开nginx配置文件 查看看自己的配置文件是否域名有配置相同的 6, pid nginx: [error] open() “/application/nginx-1.14.0/logs/nginx.pid” failed (2: No such file or directory) pid 文件没找到 使用命令 nginx -c conf/nginx.conf7, worker进程用户被删除了 nginx: [emerg] getpwnam(“www”) failed worker进程管理用户被删除了 8, 服务已经启动,不要反复启动 [root@web01 www]# nginx nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use) nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use) nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use) nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use) nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use) nginx: [emerg] still could not bind()","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://kingle.我爱你/tags/nginx/"}]},{"title":"rsync 常见问题","slug":"rsync-常见问题","date":"2018-09-05T09:49:06.000Z","updated":"2018-09-05T09:52:10.228Z","comments":true,"path":"2018/09/05/rsync-常见问题/","link":"","permalink":"https://kingle.我爱你/2018/09/05/rsync-常见问题/","excerpt":"","text":"Rsync服务常见问题汇总讲解： rsync服务端开启的iptables防火墙【客户端的错误】No route to host【错误演示过程】[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backuprsync: failed to connect to 172.16.1.41: No route to host (113)rsync error: error in socket IO (code 10) at clientserver.c(124) [sender=3.0.6]【异常问题解决】关闭rsync服务端的防火墙服务（iptables）[root@backup mnt]# /etc/init.d/iptables stopiptables: Setting chains to policy ACCEPT: filter [ OK ]iptables: Flushing firewall rules: [ OK ]iptables: Unloading modules: [ OK ][root@backup mnt]# /etc/init.d/iptables statusiptables: Firewall is not running. rsync客户端执行rsync命令错误【客户端的错误】The remote path must start with a module name not a /【错误演示过程】[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::/backupERROR: The remote path must start with a module name not a /rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6]【异常问题解决】rsync命令语法理解错误，::/backup是错误的语法，应该为::backup(rsync模块) rsync服务认证用户失败【客户端的错误】auth failed on module kingle【错误演示过程】[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backupPassword:@ERROR: auth failed on module backuprsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6]【异常问题解决】 密码真的输入错误，用户名真的错误 secrets file = /etc/rsync.password指定的密码文件和实际密码文件名称不一致 /etc/rsync.password文件权限不是600 rsync_backup:123456密码配置文件后面注意不要有空格 rsync客户端密码文件中只输入密码信息即可，不要输入虚拟认证用户名称 rsync服务位置模块错误【客户端的错误】Unknown module ‘backup’【错误演示过程】[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup@ERROR: Unknown module ‘backup’rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6]【异常问题解决】 /etc/rsyncd.conf配置文件模块名称书写错误 rsync服务权限阻止问题【客户端的错误】Permission denied【错误演示过程】[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backupPassword:sending incremental file listhostsrsync: mkstemp “.hosts.5z3AOA” (in backup) failed: Permission denied (13)sent 196 bytes received 27 bytes 63.71 bytes/sectotal size is 349 speedup is 1.57rsync error: some files/attrs were not transferred (see previous errors) (code 23) at main.c(1039) [sender=3.0.6]【异常问题解决】 共享目录的属主和属组不正确，不是rsync 共享目录的权限不正确，不是755 rsync服务备份目录异常【客户端的错误】chdir failed【错误演示过程】[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backupPassword:@ERROR: chdir failedrsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6]【异常问题解决】 备份存储目录没有建立 建立的备份存储目录和配置文件定义不一致说明：如果没有备份存储目录 rsync服务无效用户信息【客户端的错误】invalid uid rsync【错误演示过程】[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backupPassword:@ERROR: invalid uid rsyncrsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6]【异常问题解决】rsync服务对应rsync虚拟用户不存在了 客户端已经配置了密码文件，但免秘钥登录方式，依旧需要输入密码【客户端的错误】password file must not be other-accessible【错误演示过程】[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup –password-file=/etc/rsync.passwordpassword file must not be other-accessiblecontinuing without password filePassword:sending incremental file listsent 26 bytes received 8 bytes 5.23 bytes/sectotal size is 349 speedup is 10.26【异常问题解决】rsync客户端的秘钥文件也必须是600权限 rsync客户端连接慢问题【错误日志信息】错误日志输出2017/03/08 20:14:43 [3422] params.c:Parameter() - Ignoring badly formed line in configuration file: ignore errors2017/03/08 20:14:43 [3422] name lookup failed for 172.16.1.31: Name or service not known2017/03/08 20:14:43 [3422] connect from UNKNOWN (172.16.1.31)2017/03/08 20:14:43 [3422] rsync to backup/ from rsync_backup@unknown (172.16.1.31)2017/03/08 20:14:43 [3422] receiving file list2017/03/08 20:14:43 [3422] sent 76 bytes received 83 bytes total size 349正确日志输出2017/03/08 20:16:45 [3443] params.c:Parameter() - Ignoring badly formed line in configuration file: ignore errors2017/03/08 20:16:45 [3443] connect from nfs02 (172.16.1.31)2017/03/08 20:16:45 [3443] rsync to backup/ from rsync_backup@nfs02 (172.16.1.31)2017/03/08 20:16:45 [3443] receiving file list2017/03/08 20:16:45 [3443] sent 76 bytes received 83 bytes total size 349【异常问题解决】查看日志进行分析，编写rsync服务端hosts解析文件 10 rsync服务没有正确启动 【错误日志信息】 Connection refused (111) 【错误演示过程】 [root@kingle-muban ~]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup rsync: failed to connect to 172.16.1.41: Connection refused (111) rsync error: error in socket IO (code 10) at clientserver.c(124) [sender=3.0.6] 【异常问题解决】 [root@kingle-muban ~]# rsync –daemon [root@kingle-muban ~]# ss -lntup |grep rsync tcp LISTEN 0 5 :::873 ::: users:((“rsync”,1434,5)) tcp LISTEN 0 5 :873 : users:((“rsync”,1434,4)) [root@kingle-muban ~]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup Password: sending incremental file list hosts sent 196 bytes received 27 bytes 49.56 bytes/sec total size is 349 speedup is 1.57","categories":[],"tags":[{"name":"rsync","slug":"rsync","permalink":"https://kingle.我爱你/tags/rsync/"}]},{"title":"nfs 常见问题","slug":"nfs-常见问题","date":"2018-09-05T09:48:51.000Z","updated":"2018-09-05T09:50:33.681Z","comments":true,"path":"2018/09/05/nfs-常见问题/","link":"","permalink":"https://kingle.我爱你/2018/09/05/nfs-常见问题/","excerpt":"","text":"总结nfs服务常见问题: [root@backup read]# touch r01.txttouch: cannot touch `r01.txt’: Stale file handle使用共享目录创建文件出现文件句柄错误原因:nfs服务端对共享目录进行了调整, 但是调整时客户端还在使用相应的共享目录解决方法:将和相应共享目录相关的所有挂载点进行卸载,然后重新挂载即可 [root@nfs-client1 ~]# showmount -e 10.0.0.7 &lt;- 恭喜·各位，这里遇到了故障clnt_create: RPC: Port mapper failure - Unable to receive: errno 113 (No route to host)原因:防火墙iptables服务开启了解决:关闭防火墙即可 第二个错误：“RPC: Program not registered”原因:提示很清楚了，是服务器端RPC服务和NFS服务存在启动顺序问题。 客户端挂载报错“No such file or directory”[root@nfs-client ~]# showmount -e 172.16.1.31Export list for 172.16.1.31:/data 172.16.1.0/24[root@nfs-client ~]# mount -t nfs 172.16.1.31:/data /mntmount.nfs: mounting 172.16.1.31:/data failed, reason given by server: No such file or directory解答：原因是NFS服务器端没有共享目录/data，创建即可。命令如下：[root@nfs-server ~]# mkdir /data 卸载挂载设备时显示device is busy。[root@nfs-client mnt]# umount /mntumount.nfs: /mnt: device is busyumount.nfs: /mnt: device is busy解决方式:umount -lf /read/-l Lazy unmount – 懒惰的进行卸载-f Force unmount (in case of an unreachable NFS system) — 实现强制卸载 共享目录挂载后,创建文件很慢mount -t nfs 172.16.1.31:/data /mntcd /mnttime touch test.txt原因分析：l NFS服务端重启之后。立刻进行挂载会出现此问题，因为NFS自身重启的时候，拥有无敌的时间，默认是90秒；在无敌时间内，是不能对共享目录进行更改的操作；l 在系统配置中/etc/sysconfig/nfs中指定了无敌时间的配置参数NFSD_V4_GRACE=90NFSD_V4_LEASE=90NLM_GRACE_PERI0D=90","categories":[],"tags":[{"name":"nfs","slug":"nfs","permalink":"https://kingle.我爱你/tags/nfs/"}]},{"title":"","slug":"跟我一起学正则表达式","date":"2018-09-05T03:42:58.740Z","updated":"2018-09-06T00:29:46.917Z","comments":true,"path":"2018/09/05/跟我一起学正则表达式/","link":"","permalink":"https://kingle.我爱你/2018/09/05/跟我一起学正则表达式/","excerpt":"","text":"title: 跟我一起学正则表达式date: 2018-07-11 19:54:45 tags: 正则表达式一，---&gt; \\(?0\\d{2}[) -]?\\d{8} 看到这个了吗？？ 今晚我们的目标 很简单的 ### 二， 1) 什么是正则表达式 正则表达式为了处理大量的文本|字符串而定义的一套规则和方法 ２）为何使用正则表达式 linux运维工作，大量操作命令，化繁为简。 正则表达式高级工具：支持三剑客 ---慢慢来后面讲 三， 正则表达式从入门到入狱，从删库到跑路 dos 通配符： *：任意的字符串 （你要寻找摸个目录下的txt文件，泥就可以输入*.txt，表示目录下所有带.txt的文件） ?: 代替任意单个字符 （你可能输入单词会突然有一个字母记不住或者多个，你就可以he？？o，这样就能搜索到很多hello，heqwo，heoko等等只要那两个字母不同就能匹配） 正则表达式--&gt; \\b 代表着单词的开头和结尾--&gt;搜索单词的时候在单词的开头结尾输入\\b eg：你要精确搜索hello --&gt; \\bhello\\b \\d 匹配一位数字 . 匹配除换行符以外的任意字符 \\w 匹配字母或数字或下划线或汉字 \\s 匹配任意的空白符 \\d 匹配数字 \\b 匹配单词的开始或结束 ^ 匹配字符串的开始 $ 匹配字符串的结束","categories":[],"tags":[]},{"title":"lnmp 编译安装脚本","slug":"lnmp-编译安装脚本","date":"2018-09-05T01:59:58.000Z","updated":"2018-09-05T02:16:34.194Z","comments":true,"path":"2018/09/05/lnmp-编译安装脚本/","link":"","permalink":"https://kingle.我爱你/2018/09/05/lnmp-编译安装脚本/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159#!/bin/bash##########################################################by：kingle ##use: fast lnmp ##version:1.0 ##php:php-7.2.8 ##nginx: 1.15.1 ##mysql:5.6.41 ##cenos: 2.6.32-754.2.1.el6.x86_64 # #########################################################dir=/root/optnginx_install_dir=&quot;/lnmp/nginx&quot;mysql_install_dir=&quot;/lnmp/mysql&quot;php_install_path=&quot;/lnmp/php&quot;nginx_name=&quot;nginx-1.15.1.tar.gz&quot;mysql_name=&quot;mysql-5.6.41.tar.gz&quot;php_name=&quot;php-7.2.8.tar.gz&quot;[ -f /etc/init.d/functions ] &amp;&amp; . /etc/init.d/functions || exit 1#安装nginxinstall_nginx()&#123; #跟新源 wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo # 安装依赖包 yum install -y pcre pcre-devel openssl openssl-devel gcc make gcc-c++ [ -e $dir ] &amp;&amp; cd $dir if [ -f $nginx_name ] then echo &apos;nginx need have&apos; # t解压文件 tar zxf $nginx_name &amp;&amp; cd nginx-1.15.1 # 添加僵尸用户 useradd nginx -s /sbin/nologin -M # 编译安装 ./configure --user=nginx --group=nginx --prefix=/lnmp/nginx-1.15.1/ --with-http_stub_status_module --with-http_ssl_module [ $(echo $?) -eq 0 ] &amp;&amp; make &amp;&amp; make install [ $(echo $?) -eq 0 ] &amp;&amp; echo &quot;nginx install success....&quot; #创建软链接 ln -s /lnmp/nginx-1.15.1 /lnmp/nginx fi&#125;#开启脚本start_nginx()&#123; service iptables stop setenforce 0 /lnmp/nginx/sbin/nginx -c /lnmp/nginx-1.15.1//conf/nginx.conf $nginx_install_dir/sbin/nginx -t if [ $(echo $?) -eq 0 ] then $nginx_install_dir/sbin/nginx -s reload if [ $(netstat -lutnp|grep 80|wc -l) -eq 1 ] then action &quot;nginx success...&quot; /bin/true else echo &quot;nginx error！&quot; fi fi &#125;install_mysql()&#123; yum install -y ncurses-devel automake autoconf bison libtool-ltdl-devel [ -e $dir ] &amp;&amp; cd $dir if [ -f $mysql_name ] then yum install cmake -y tar zxvf $mysql_name if [ ! -d $mysql_install_dir ] then mkdir -p $mysql_install_dir fi groupadd mysql useradd -s /sbin/nologin -g mysql -M mysql mkdir -p /lnmp/mysql-5.6.41/data cd $dir/mysql-5.6.41 cmake -DCMAKE_INSTALL_PREFIX=/lnmp/mysql-5.6.41 -DMYSQL_DATADIR=/lnmp/mysql-5.6.41/data -DMYSQL_UNIX_ADDR=/lnmp/mysql-5.6.41/tmp/mysql.sock -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_ZLIB=bundled -DWITH_SSL=bundled -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 -DENABLE_DOWNLOADS=1 -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DEXTRA_CHARSETS=all -DMYSQL_TCP_PORT=3306 -DWITH_DEBUG=0 make &amp;&amp; make install ln -s /lnmp/mysql-5.6.41/ /lnmp/mysql /lnmp/mysql-5.6.41/scripts/mysql_install_db --user=mysql --basedir=/lnmp/mysql-5.6.41 --datadir=/lnmp/mysql-5.6.41/data --user=mysql #授权 chown -R mysql:mysql /lnmp/mysql-5.6.41/ #创建目录，默认不会创建，但是启动会报错 mkdir /lnmp/mysql/tmp [ $(echo $?) -eq 0 ] &amp;&amp; \\cp -f /lnmp/mysql-5.6.41/support-files/my*.cnf /etc/my.cnf cp /lnmp/mysql-5.6.41/support-files/mysql.server /etc/init.d/mysqld # 加权限 chmod +x /etc/init.d/mysqld # 自启 chkconfig --add mysqld chkconfig mysqld on # 加环境 PATH=$PATH:/lnmp/mysql-5.6.41/bin/ #添加环境 echo &quot;export PATH=$PATH:/lnmp/mysql/bin/&quot; &gt;&gt;/etc/profile source /etc/profile fi &#125;#启动函数start_mysql()&#123; /etc/init.d/mysqld start if [ $(netstat -lutnp|grep 3306|wc -l) -eq 1 ] then action &quot;mysql success&quot; /bin/true else echo &quot;mysql error！&quot; fi&#125;# 安装phpinstall_php()&#123; yum install zlib-devel openssl-devel openssl libxml2-devel libjpeg-devel libjpeg-turbo-devel libiconv-devel freetype-devel libpng-devel gd-devel libcurl-devel libxslt-devel libxslt-devel libmcrypt-devel mcrypt mhash -y [ -e $dir ] &amp;&amp; cd $dir if [ -f $php_name ] then tar zxf $php_name &amp;&amp; cd php-7.2.8 echo &quot;Please witing loding................................................................&quot; #编译安装 ./configure --prefix=/lnmp/php7.2.8 --with-mysql=/lnmp/mysql --with-iconv-dir=/usr/local/libiconv --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --with-curlwrappers --enable-mbregex --enable-fpm --enable-mbstring --with-mcrypt --enable-gd-native-ttf --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --enable-short-tags --enable-zend-multibyte --enable-static --with-xsl --with-fpm-user=nginx --with-fpm-group=nginx --enable-ftp [ $(echo $?) -eq 0 ] &amp;&amp; ln -s /lnmp/mysql/lib/libmysqlclient.so.18 /usr/lib64/ &amp;&amp; touch ext/phar/phar.phar make &gt;&gt; /dev/null 2&gt;&amp;1 make install ln -s /lnmp/php7.2.8 /lnmp/php cp ./php.ini-production /lnmp/php/lib/php.ini cp /lnmp/php/etc/php-fpm.conf.default /lnmp/php/etc/php-fpm.conf cp /lnmp/php/etc/php-fpm.d/www.conf.default /lnmp/php/etc/php-fpm.d/www.conf cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm #授予权限最好是700 chmod +x /etc/init.d/php-fpm PATH=$PATH:/lnmp/php/bin/ echo &quot;export PATH=$PATH:/lnmp/php/bin/&quot; &gt;&gt;/etc/profile source /etc/profile chkconfig --add php-fpm chkconfig php-fpm onfi&#125;# 启动函数start_phpfpm()&#123; /etc/init.d/php-fpm start if [ $(netstat -lutnp|grep 9000|wc -l) -eq 1 ] then action &quot;php-fpm success&quot; /bin/true else echo &quot;php-fpm error&quot; fi&#125;main()&#123; install_nginx sleep 3 install_mysql sleep 3 install_php start_nginx sleep 2 start_mysql sleep 2 start_phpfpm&#125;main","categories":[],"tags":[{"name":"lnmp shell","slug":"lnmp-shell","permalink":"https://kingle.我爱你/tags/lnmp-shell/"}]},{"title":"vim自定义配置文件","slug":"vim自定义配置文件","date":"2018-09-05T01:57:31.000Z","updated":"2018-09-05T01:59:19.162Z","comments":true,"path":"2018/09/05/vim自定义配置文件/","link":"","permalink":"https://kingle.我爱你/2018/09/05/vim自定义配置文件/","excerpt":"","text":"内容复制即可使用 .vimrc 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179set tabstop=4set shiftwidth=4set softtabstop=4set noexpandtabset nusyntax on &quot; 语法高亮set ruler &quot; 显示标尺set showcmd &quot; 输入的命令显示出来，看的清楚些set cmdheight=1 &quot; 命令行（在状态行下）的高度，设置为1set scrolloff=3 &quot; 光标移动到buffer的顶部和底部时保持3行距离set statusline=%F%m%r%h%w\\ [FORMAT=%&#123;&amp;ff&#125;]\\ [TYPE=%Y]\\ [POS=%l,%v][%p%%]\\ %&#123;strftime(\\&quot;%d/%m/%y\\ -\\ %H:%M\\&quot;)&#125; &quot; 状态行显示的内容set laststatus=2 &quot; 启动显示状态行(1),总是显示状态行(2)set nocompatible &quot; 去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限&quot; 设置当文件被改动时自动载入set autoread&quot; 代码补全set completeopt=preview,menu&quot; 突出显示当前行set cursorline&quot; 在处理未保存或只读文件的时候，弹出确认set confirm&quot; 自动缩进set autoindentset cindent&quot;禁止生成临时文件set nobackupset noswapfile&quot;搜索忽略大小写set ignorecase&quot;搜索逐字符高亮set hlsearchset incsearch&quot;行内替换set gdefault&quot; 侦测文件类型filetype on&quot; 载入文件类型插件filetype plugin on&quot; 为特定文件类型载入相关缩进文件filetype indent on&quot; 保存全局变量set viminfo+=!&quot; 带有如下符号的单词不要被换行分割set iskeyword+=_,$,@,%,#,-&quot; 字符间插入的像素行数目set linespace=0&quot; 允许backspace和光标键跨越行边界set whichwrap+=&lt;,&gt;,h,l&quot; 高亮显示匹配的括号set showmatch&quot; 匹配括号高亮的时间（单位是十分之一秒）set matchtime=1&quot; 使回格键（backspace）正常处理indent, eol, start等set backspace=2&quot; 字符间插入的像素行数目set linespace=0&quot; 增强模式中的命令行自动完成操作set wildmenu&quot; 通过使用: commands命令，告诉我们文件的哪一行被改变过set report=0au BufRead,BufNewFile * setfiletype txt&quot;自动补全:inoremap ( ()&lt;ESC&gt;i:inoremap ) &lt;c-r&gt;=ClosePair(&apos;)&apos;)&lt;CR&gt;:inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O:inoremap &#125; &lt;c-r&gt;=ClosePair(&apos;&#125;&apos;)&lt;CR&gt;:inoremap [ []&lt;ESC&gt;i:inoremap ] &lt;c-r&gt;=ClosePair(&apos;]&apos;)&lt;CR&gt;:inoremap &quot; &quot;&quot;&lt;ESC&gt;i:inoremap &apos; &apos;&apos;&lt;ESC&gt;ifunction! ClosePair(char) if getline(&apos;.&apos;)[col(&apos;.&apos;) - 1] == a:char return &quot;\\&lt;Right&gt;&quot; else return a:char endifendfunctionfiletype plugin indent on&quot;打开文件类型检测, 加了这句才可以用智能补全set completeopt=longest,menu&quot;&quot;&quot;&quot;&quot;新文件标题&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;新建.c,.h,.sh,.java文件，自动插入文件头autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec &quot;:call SetTitle()&quot;&quot;&quot;定义函数SetTitle，自动插入文件头func SetTitle() &quot;如果文件类型为.sh文件 if &amp;filetype == &apos;sh&apos; call setline(1,&quot;\\#########################################################################&quot;) call append(line(&quot;.&quot;), &quot;\\# File Name: &quot;.expand(&quot;%&quot;)) call append(line(&quot;.&quot;)+1, &quot;\\# Author: kingle&quot;) call append(line(&quot;.&quot;)+2, &quot;\\# Mail: kingle_work@163.com &quot;) call append(line(&quot;.&quot;)+3, &quot;\\# Created Time: &quot;.strftime(&quot;%c&quot;)) call append(line(&quot;.&quot;)+4, &quot;\\#########################################################################&quot;) call append(line(&quot;.&quot;)+5, &quot;\\#!/bin/bash&quot;) call append(line(&quot;.&quot;)+6, &quot;&quot;) else call setline(1, &quot;//-------------------------------------------------------------------------&quot;) call append(line(&quot;.&quot;), &quot;// File Name: &quot;.expand(&quot;%&quot;)) call append(line(&quot;.&quot;)+1, &quot;// Author: kingle&quot;) call append(line(&quot;.&quot;)+2, &quot;// Mail: kingle_work@163.com &quot;) call append(line(&quot;.&quot;)+3, &quot;// Created Time: &quot;.strftime(&quot;%c&quot;)) call append(line(&quot;.&quot;)+4, &quot;//-------------------------------------------------------------------------&quot;) call append(line(&quot;.&quot;)+5, &quot;&quot;) endif if &amp;filetype == &apos;cpp&apos; call append(line(&quot;.&quot;)+6, &quot;#include&lt;iostream&gt;&quot;) call append(line(&quot;.&quot;)+7, &quot;using namespace std;&quot;) call append(line(&quot;.&quot;)+8, &quot;&quot;) endif if &amp;filetype == &apos;c&apos; call append(line(&quot;.&quot;)+6, &quot;#include&lt;stdio.h&gt;&quot;) call append(line(&quot;.&quot;)+7, &quot;&quot;) endif &quot;新建文件后，自动定位到文件末尾 autocmd BufNewFile * normal Gendfunc&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;键盘命令&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;nmap &lt;leader&gt;w :w!&lt;cr&gt;nmap &lt;leader&gt;f :find&lt;cr&gt;&quot; 映射全选+复制 ctrl+amap &lt;C-A&gt; ggVGYmap! &lt;C-A&gt; &lt;Esc&gt;ggVGYmap &lt;F12&gt; gg=G&quot; 选中状态下 Ctrl+c 复制vmap &lt;C-c&gt; &quot;+y&quot;去空行nnoremap &lt;F2&gt; :g/^\\s*$/d&lt;CR&gt;&quot;比较文件nnoremap &lt;C-F2&gt; :vert diffsplit&quot;新建标签map &lt;M-F2&gt; :tabnew&lt;CR&gt;&quot;列出当前目录文件map &lt;F3&gt; :tabnew .&lt;CR&gt;&quot;打开树状文件目录map &lt;C-F3&gt; \\be&quot;C，C++ 按F5编译运行map &lt;F5&gt; :call CompileRunGcc()&lt;CR&gt;func! CompileRunGcc() exec &quot;w&quot; if &amp;filetype == &apos;c&apos; exec &quot;!g++ % -o %&lt;&quot; exec &quot;! ./%&lt;&quot; elseif &amp;filetype == &apos;cpp&apos; exec &quot;!g++ % -o %&lt;&quot; exec &quot;! ./%&lt;&quot; elseif &amp;filetype == &apos;java&apos; exec &quot;!javac %&quot; exec &quot;!java %&lt;&quot; elseif &amp;filetype == &apos;sh&apos; :!./% endifendfunc&quot;C,C++的调试map &lt;F8&gt; :call Rungdb()&lt;CR&gt;func! Rungdb() exec &quot;w&quot; exec &quot;!g++ % -g -o %&lt;&quot; exec &quot;!gdb ./%&lt;&quot;endfunc&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; CTags的设定&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;let Tlist_Sort_Type = &quot;name&quot; &quot; 按照名称排序let Tlist_Use_Right_Window = 1 &quot; 在右侧显示窗口let Tlist_Compart_Format = 1 &quot; 压缩方式let Tlist_Exist_OnlyWindow = 1 &quot; 如果只有一个buffer，kill窗口也kill掉bufferlet Tlist_File_Fold_Auto_Close = 0 &quot; 不要关闭其他文件的tagslet Tlist_Enable_Fold_Column = 0 &quot; 不要显示折叠树let Tlist_Show_One_File=1 &quot;不同时显示多个文件的tag，只显示当前文件的&quot;设置tagsset tags=tags&quot;set autochdir","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"https://kingle.我爱你/tags/vim/"}]},{"title":"linux 系统优化脚本","slug":"linux-系统优化脚本","date":"2018-09-05T01:52:18.000Z","updated":"2018-09-05T01:59:39.689Z","comments":true,"path":"2018/09/05/linux-系统优化脚本/","link":"","permalink":"https://kingle.我爱你/2018/09/05/linux-系统优化脚本/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477#!/bin/bash# Date: 2018-6-8#version:1.2#实现功能：一键系统优化15项脚本，适用于Centos6.x#################################################Source function library.. /etc/init.d/functions#dateDATE=`date +&quot;%y-%m-%d %H:%M:%S&quot;`#ipIPADDR=`grep &quot;IPADDR&quot; /etc/sysconfig/network-scripts/ifcfg-eth0|cut -d= -f 2 `#hostnameHOSTNAME=`hostname -s`#userUSER=`whoami`#disk_checkDISK_SDA=`df -h |grep -w &quot;/&quot; |awk &apos;&#123;print $5&#125;&apos;`#cpu_average_checkcpu_uptime=`cat /proc/loadavg|awk &apos;&#123;print $1,$2,$3&#125;&apos;`#set LANGexport LANG=zh_CN.UTF-8#Require root to run this script.uid=`id | cut -d\\( -f1 | cut -d= -f2`if [ $uid -ne 0 ];then action &quot;Please run this script as root.&quot; /bin/false exit 1fi#&quot;stty erase ^H&quot;\\cp /root/.bash_profile /root/.bash_profile_$(date +%F)erase=`grep -wx &quot;stty erase ^H&quot; /root/.bash_profile |wc -l`if [ $erase -lt 1 ];then echo &quot;stty erase ^H&quot; &gt;&gt;/root/.bash_profile source /root/.bash_profilefi#Config Yum CentOS-Bases.repo and save Yum fileconfigYum()&#123;echo &quot;================更新为国内YUM源==================&quot; cd /etc/yum.repos.d/ \\cp CentOS-Base.repo CentOS-Base.repo.$(date +%F) ping -c 1 mirrors.aliyun.com &gt;/dev/null if [ $? -eq 0 ];then wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo else echo &quot;无法连接网络。&quot; exit $? fiecho &quot;==============保存YUM源文件======================&quot;sed -i &apos;s#keepcache=0#keepcache=1#g&apos; /etc/yum.conf grep keepcache /etc/yum.confsleep 5action &quot;配置国内YUM完成&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot; sleep 2&#125;#Charset zh_CN.UTF-8initI18n()&#123;echo &quot;================更改为中文字符集=================&quot; \\cp /etc/sysconfig/i18n /etc/sysconfig/i18n.$(date +%F)&gt;/etc/sysconfig/i18ncat &gt;&gt;/etc/sysconfig/i18n&lt;&lt;EOFLANG=&quot;zh_CN.UTF-8&quot;#LANG=&quot;en_US.UTF-8&quot;SYSFONT=&quot;latarcyrheb-sun16&quot;EOF source /etc/sysconfig/i18n echo &apos;#cat /etc/sysconfig/i18n&apos; grep LANG /etc/sysconfig/i18naction &quot;更改字符集zh_CN.UTF-8完成&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot; sleep 2&#125;#Close Selinux and IptablesinitFirewall()&#123;echo &quot;============禁用SELINUX及关闭防火墙==============&quot; \\cp /etc/selinux/config /etc/selinux/config.$(date +%F) /etc/init.d/iptables stop sed -i &apos;s/SELINUX=enforcing/SELINUX=disabled/g&apos; /etc/selinux/config setenforce 0 /etc/init.d/iptables status echo &apos;#grep SELINUX=disabled /etc/selinux/config &apos; grep SELINUX=disabled /etc/selinux/config echo &apos;#getenforce &apos; getenforce action &quot;禁用selinux及关闭防火墙完成&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot; sleep 2&#125;#Init Auto Startup ServiceinitService()&#123;echo &quot;===============精简开机自启动====================&quot; export LANG=&quot;en_US.UTF-8&quot; for A in `chkconfig --list |grep 3:on |awk &apos;&#123;print $1&#125;&apos; `;do chkconfig $A off;done for B in rsyslog network sshd crond;do chkconfig $B on;done echo &apos;+--------which services on---------+&apos; chkconfig --list |grep 3:on echo &apos;+----------------------------------+&apos; export LANG=&quot;zh_CN.UTF-8&quot;action &quot;精简开机自启动完成&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot; sleep 2&#125;#Removal system and kernel version login before the screen displayinitRemoval()&#123;echo &quot;======去除系统及内核版本登录前的屏幕显示=======&quot;#must use root user run scriptsif [ $UID -ne 0 ];then echo This script must use the root user ! ! ! sleep 2 exit 0fi &gt;/etc/redhat-release &gt;/etc/issueaction &quot;去除系统及内核版本登录前的屏幕显示&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot; sleep 2&#125;#Change sshd default port and prohibit user root remote login.initSsh()&#123;echo &quot;========修改ssh默认端口禁用root远程登录==========&quot; \\cp /etc/ssh/sshd_config /etc/ssh/sshd_config.$(date +%F) sed -i &apos;s/#Port 22/Port 52113/g&apos; /etc/ssh/sshd_config sed -i &apos;s/#PermitEmptyPasswords no/PermitEmptyPasswords no/g&apos; /etc/ssh/sshd_config sed -i &apos;s/#PermitRootLogin yes/PermitRootLogin no/g&apos; /etc/ssh/sshd_config sed -i &apos;s/#UseDNS yes/UseDNS no/g&apos; /etc/ssh/sshd_config echo &apos;+-------modify the sshd_config-------+&apos; echo &apos;Port 52113&apos; echo &apos;PermitEmptyPasswords no&apos; echo &apos;PermitRootLogin no&apos; echo &apos;UseDNS no&apos; echo &apos;+------------------------------------+&apos; /etc/init.d/sshd reload &amp;&amp; action &quot;修改ssh默认参数完成&quot; /bin/true || action &quot;修改ssh参数失败&quot; /bin/falseecho &quot;=================================================&quot;echo &quot;&quot; sleep 2&#125;#time syncsyncSysTime()&#123;echo &quot;================配置时间同步=====================&quot; \\cp /var/spool/cron/root /var/spool/cron/root.$(date +%F) 2&gt;/dev/null NTPDATE=`grep ntpdate /var/spool/cron/root 2&gt;/dev/null |wc -l` if [ $NTPDATE -eq 0 ];then echo &quot;#times sync by lee at $(date +%F)&quot; &gt;&gt;/var/spool/cron/root echo &quot;*/5 * * * * /usr/sbin/ntpdate time.windows.com &gt;/dev/null 2&gt;&amp;1&quot; &gt;&gt; /var/spool/cron/root fi echo &apos;#crontab -l&apos; crontab -laction &quot;配置时间同步完成&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot; sleep 2&#125;#install toolsinitTools()&#123; echo &quot;#####安装系统补装工具(选择最小化安装minimal)#####&quot; ping -c 2 mirrors.aliyun.com sleep 2 yum install tree nmap sysstat lrzsz dos2unix -y sleep 2 rpm -qa tree nmap sysstat lrzsz dos2unix sleep 2action &quot;安装系统补装工具(选择最小化安装minimal)&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot; sleep 2&#125;#add user and give sudoersaddUser()&#123;echo &quot;===================新建用户======================&quot;#add userwhile truedo read -p &quot;请输入新用户名:&quot; name NAME=`awk -F&apos;:&apos; &apos;&#123;print $1&#125;&apos; /etc/passwd|grep -wx $name 2&gt;/dev/null|wc -l` if [ $&#123;#name&#125; -eq 0 ];then echo &quot;用户名不能为空，请重新输入。&quot; continue elif [ $NAME -eq 1 ];then echo &quot;用户名已存在，请重新输入。&quot; continue fiuseradd $namebreakdone#create passwordwhile truedo read -p &quot;为 $name 创建一个密码:&quot; pass1 if [ $&#123;#pass1&#125; -eq 0 ];then echo &quot;密码不能为空，请重新输入。&quot; continue fi read -p &quot;请再次输入密码:&quot; pass2 if [ &quot;$pass1&quot; != &quot;$pass2&quot; ];then echo &quot;两次密码输入不相同，请重新输入。&quot; continue fiecho &quot;$pass2&quot; |passwd --stdin $namebreakdonesleep 1#add visudoecho &quot;#####add visudo#####&quot;\\cp /etc/sudoers /etc/sudoers.$(date +%F)SUDO=`grep -w &quot;$name&quot; /etc/sudoers |wc -l`if [ $SUDO -eq 0 ];then echo &quot;$name ALL=(ALL) NOPASSWD: ALL&quot; &gt;&gt;/etc/sudoers echo &apos;#tail -1 /etc/sudoers&apos; grep -w &quot;$name&quot; /etc/sudoers sleep 1fiaction &quot;创建用户$name并将其加入visudo完成&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot;sleep 2&#125;#Adjust the file descriptor(limits.conf)initLimits()&#123;echo &quot;===============加大文件描述符====================&quot; LIMIT=`grep nofile /etc/security/limits.conf |grep -v &quot;^#&quot;|wc -l` if [ $LIMIT -eq 0 ];then \\cp /etc/security/limits.conf /etc/security/limits.conf.$(date +%F) echo &apos;* - nofile 65535&apos;&gt;&gt;/etc/security/limits.conf fi echo &apos;#tail -1 /etc/security/limits.conf&apos; tail -1 /etc/security/limits.conf ulimit -HSn 65535 echo &apos;#ulimit -n&apos; ulimit -naction &quot;配置文件描述符为65535&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot;sleep 2&#125;#set sshinitSsh()&#123;echo &quot;======禁用GSSAPI来认证，也禁用DNS反向解析，加快SSH登陆速度=======&quot;sed -i &apos;s/^GSSAPIAuthentication yes$/GSSAPIAuthentication no/&apos; /etc/ssh/sshd_configsed -i &apos;s/#UseDNS yes/UseDNS no/&apos; /etc/ssh/sshd_configservice sshd restartaction &quot;禁用GSSAPI来认证，也禁用DNS反向解析，加快SSH登陆速度&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot;sleep 2&#125;#set the control-alt-delete to guard against the miSUSEinitRestart()&#123;sed -i &apos;s#exec /sbin/shutdown -r now#\\#exec /sbin/shutdown -r now#&apos; /etc/init/control-alt-delete.confaction &quot;将ctrl alt delete键进行屏蔽，防止误操作的时候服务器重启&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot;sleep 2&#125;#Optimizing the system kernelinitSysctl()&#123;echo &quot;================优化内核参数=====================&quot;SYSCTL=`grep &quot;net.ipv4.tcp&quot; /etc/sysctl.conf |wc -l`if [ $SYSCTL -lt 10 ];then\\cp /etc/sysctl.conf /etc/sysctl.conf.$(date +%F)cat &gt;&gt;/etc/sysctl.conf&lt;&lt;EOFnet.ipv4.tcp_fin_timeout = 2net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_tw_recycle = 1net.ipv4.tcp_syncookies = 1net.ipv4.tcp_keepalive_time = 600net.ipv4.ip_local_port_range = 4000 65000net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.tcp_max_tw_buckets = 36000net.ipv4.route.gc_timeout = 100net.ipv4.tcp_syn_retries = 1net.ipv4.tcp_synack_retries = 1net.core.somaxconn = 16384net.core.netdev_max_backlog = 16384net.ipv4.tcp_max_orphans = 16384net.netfilter.nf_conntrack_max = 25000000net.netfilter.nf_conntrack_tcp_timeout_established = 180net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120net.netfilter.nf_conntrack_tcp_timeout_close_wait = 60net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120EOFfi \\cp /etc/rc.local /etc/rc.local.$(date +%F) modprobe nf_conntrack echo &quot;modprobe nf_conntrack&quot;&gt;&gt; /etc/rc.local modprobe bridge echo &quot;modprobe bridge&quot;&gt;&gt; /etc/rc.local sysctl -p action &quot;内核调优完成&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot; sleep 2&#125;#setting history and login timeoutinitHistory()&#123;echo &quot;======设置默认历史记录数和连接超时时间======&quot;echo &quot;TMOUT=300&quot; &gt;&gt;/etc/profileecho &quot;HISTSIZE=5&quot; &gt;&gt;/etc/profileecho &quot;HISTFILESIZE=5&quot; &gt;&gt;/etc/profiletail -3 /etc/profilesource /etc/profileaction &quot;设置默认历史记录数和连接超时时间&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot;sleep 2&#125;#chattr file systeminitChattr()&#123;echo &quot;======锁定关键文件系统======&quot;chattr +i /etc/passwdchattr +i /etc/inittabchattr +i /etc/groupchattr +i /etc/shadowchattr +i /etc/gshadow/bin/mv /usr/bin/chattr /usr/bin/lockaction &quot;锁定关键文件系统&quot; /bin/trueecho &quot;=================================================&quot;echo &quot;&quot;sleep 2&#125;#menu2menu2()&#123;while truedoclearcat &lt;&lt;EOF----------------------------------------|****Please Enter Your Choice:[0-15]****|----------------------------------------(1) 新建一个用户并将其加入visudo(2) 配置为国内YUM源镜像和保存YUM源文件(3) 配置中文字符集(4) 禁用SELINUX及关闭防火墙(5) 精简开机自启动(6) 去除系统及内核版本登录前的屏幕显示(7) 修改ssh默认端口及禁用root远程登录(8) 设置时间同步(9) 安装系统补装工具(选择最小化安装minimal)(10) 加大文件描述符(11) 禁用GSSAPI来认证，也禁用DNS反向解析，加快SSH登陆速度(12) 将ctrl alt delete键进行屏蔽，防止误操作的时候服务器重启(13) 系统内核调优(14) 设置默认历史记录数和连接超时时间(15) 锁定关键文件系统(0) 返回上一级菜单EOFread -p &quot;Please enter your Choice[0-15]: &quot; input2case &quot;$input2&quot; in 0) clear break ;; 1) addUser ;; 2) configYum ;; 3) initI18n ;; 4) initFirewall ;; 5) initService ;; 6) initRemoval ;; 7) initSsh ;; 8) syncSysTime ;; 9) initTools ;; 10) initLimits ;; 11) initSsh ;; 12) initRestart ;; 13) initSysctl ;; 14) initHistory ;; 15) initChattr ;; *) echo &quot;----------------------------------&quot; echo &quot;| Warning!!! |&quot; echo &quot;| Please Enter Right Choice! |&quot; echo &quot;----------------------------------&quot; for i in `seq -w 3 -1 1` do echo -ne &quot;\\b\\b$i&quot;; sleep 1; done clearesacdone&#125;#initTools#menuwhile truedoclearecho &quot;========================================&quot;echo &apos; Linux Optimization &apos; echo &quot;========================================&quot;cat &lt;&lt; EOF|-----------System Infomation-----------| DATE :$DATE| HOSTNAME :$HOSTNAME| USER :$USER| IP :$IPADDR| DISK_USED :$DISK_SDA| CPU_AVERAGE:$cpu_uptime----------------------------------------|****Please Enter Your Choice:[1-3]****|----------------------------------------(1) 一键优化(2) 自定义优化(3) 退出EOF#choiceread -p &quot;Please enter your choice[0-3]: &quot; input1case &quot;$input1&quot; in1) addUser configYum initI18n initFirewall initService initRemoval initSsh syncSysTime initTools initLimits initSsh initRestart initSysctl initHistory initChattr ;;2) menu2 ;;3) clear break ;;*) echo &quot;----------------------------------&quot; echo &quot;| Warning!!! |&quot; echo &quot;| Please Enter Right Choice! |&quot; echo &quot;----------------------------------&quot; for i in `seq -w 3 -1 1` do echo -ne &quot;\\b\\b$i&quot;; sleep 1; done clearesac done","categories":[],"tags":[{"name":"shell","slug":"shell","permalink":"https://kingle.我爱你/tags/shell/"}]},{"title":"ansible 命令操作项","slug":"ansible-命令操作项","date":"2018-09-05T01:35:54.000Z","updated":"2018-09-06T00:40:53.219Z","comments":true,"path":"2018/09/05/ansible-命令操作项/","link":"","permalink":"https://kingle.我爱你/2018/09/05/ansible-命令操作项/","excerpt":"","text":"本文主要介绍Ansible的几个命令模块，包括： command - 在远程节点上执行命令 shell - 让远程主机在shell进程下执行命令 script - 将本地script传送到远程主机之后执行 raw - 执行低级的和脏的SSH命令 expect - 执行命令并响应提示 telnet - 执行低级的和脏的telnet命令 command模块简介 command模块用于在给的的节点上运行系统命令，比如echo hello。 它不会通过shell处理命令，因此不支持像$HOME这样的变量和，以及&lt;, &gt;, |, ;和&amp;等都是无效的。也就是在command模块中无法使用管道符。 模块参数名称 必选 备注chdir no 运行command命令前先cd到这个目录creates no 如果这个参数对应的文件存在，就不运行commandfree_form yes 需要执行的脚本（没有真正的参数为free_form）executable no 改变用来执行命令的shell，应该是可执行文件的绝对路径。removes no 如果这个参数对应的文件不存在，就不运行command，与creates参数的作用相反stdin(2.4后新增) no 将命令的stdin设置为指定的值示例 列出指定目录下的文件 [root@centos7 ~]# ansible test -m command -a “ls /root”172.20.21.120 | SUCCESS | rc=0 &gt;&gt;anaconda-ks.cfgtest.shwhoami.rst [root@centos7 ~]# ansible test -m command -a “ls /root creates=test.sh”172.20.21.120 | SUCCESS | rc=0 &gt;&gt;skipped, since test.sh exists [root@centos7 ~]# ansible test -m command -a “ls /root removes=test.sh1”172.20.21.120 | SUCCESS | rc=0 &gt;&gt;skipped, since test.sh1 does not exist 在这个里面，首先更换目录到root目录中，然后查看test.sh是否存在，如果存在，那么命令不会执行；如果不存在，那么执行命令。 在这里也可以看到，命令是必须存在的，但是没有参数名为free_form参数。 切换目录执行命令 [root@centos7 ~]# ansible test -m command -a “cat test.sh chdir=/root”172.20.21.120 | SUCCESS | rc=0 &gt;&gt; #!/bin/bashi=0echo $((i+1)) [root@centos7 ~]# ansible test -m command -a “sh test.sh chdir=/root”172.20.21.120 | SUCCESS | rc=0 &gt;&gt;1 无法使用管道符 [root@centos7 ~]# ansible test -m command -a “ls /root | grep test”172.20.21.120 | FAILED | rc=2 &gt;&gt;/root:anaconda-ks.cfgtest.shwhoami.rstls: 无法访问|: 没有那个文件或目录ls: 无法访问grep: 没有那个文件或目录ls: 无法访问test: 没有那个文件或目录non-zero return code 注意事项 若要通过shell运行一个命令，比如&lt;, &gt;, |等，你实际上需要shell模块。 command模块更安全，因为它不受用户环境的影响 从版本2.4开始，executable参数被删除。如果您需要此参数，请改用shell模块。 对于Windows节点，请改用win_command模块。 shell模块简介 让远程主机在shell进程下执行命令，从而支持shell的特性，如管道等。与command模块几乎相同，但在执行命令的时候使用的是/bin/sh。模块参数名称 必选 备注chdir no 运行command命令前先cd到这个目录creates no 如果这个参数对应的文件存在，就不运行commandexecutable no 改变用来执行命令的shell，应该是可执行文件的绝对路径。free_form yes 需要执行的脚本（没有真正的参数为free_form）removes no 如果这个参数对应的文件不存在，就不运行command，与creates参数的作用相反stdin(2.4后新增) no 将命令的stdin设置为指定的值示例 切换目录，执行命令并保持输出 [root@centos7 ~]# ansible test -m shell -a “sh test.sh &gt; result chdir=/root”172.20.21.120 | SUCCESS | rc=0 &gt;&gt; [root@centos7 ~]# ansible test -m shell -a “cat result chdir=/root”172.20.21.120 | SUCCESS | rc=0 &gt;&gt;1 注意事项 如果你想安全可靠的执行命令，请使用command模块，这也是编写playbook的最佳实践。 script模块简介 script模块的作用是将本地script传送到远程主机之后执行 给定的脚本将通过远程节点上的shell环境进行处理 script模块在远程系统上不需要python的支持 模块参数名称 必选 默认值 可选值 备注chdir(2.4后新增) no 运行command命令前先cd到这个目录creates no 如果这个参数对应的文件存在，就不运行commanddecrypt no yes yes/no 此选项控制使用保管库的源文件的自动解密free_form yes 需要执行脚本的本地文件路径（没有真正的参数为free_form）removes no 如果这个参数对应的文件不存在，就不运行command，与creates参数的作用相反示例 在远程主机上执行脚本 [root@centos7 ~]# ansible test -m script -a “test.sh chdir=/tmp”172.20.21.120 | SUCCESS =&gt; { “changed”: true, “rc”: 0, “stderr”: “Shared connection to 172.20.21.120 closed.\\r\\n”, “stdout”: “/tmp\\r\\n”, “stdout_lines”: [ “/tmp” ]} 注意事项 通常来说，使用Ansible模块比推送脚本更好 当脚本执行时，ssh连接插件将通过-tt强制伪tty分配。伪ttys没有stderr通道，所有stderr被发送到标准输出。如果需要标准输出和标准错误分离，请使用到copy模块。 raw模块简介 raw模块主要用于执行一些低级的，脏的SSH命令，而不是通过command模块。 raw模块只适用于下列两种场景，第一种情况是在较老的（Python 2.4和之前的版本）主机上，另一种情况是对任何没有安装Python的设备（如路由器）。 在任何其他情况下，使用shell或command模块更为合适。 就像script模块一样，raw模块不需要远程系统上的python 模块参数名称 必选 备注executable no 改变用来执行命令的shell，应该是可执行文件的绝对路径。free_form yes 需要执行的脚本（没有真正的参数为free_form）示例 在远程主机上执行脚本 [root@centos7 ~]# ansible test -m raw -a “pwd”172.20.21.120 | SUCCESS | rc=0 &gt;&gt;/rootShared connection to 172.20.21.120 closed. 注意事项 如果要安全可靠地执行命令，最好使用shell或command模块来代替。 如果从playbook中使用raw，则可能需要使用gather_facts: no禁用事实收集 expect模块简介 expect模块用于在给的的节点上执行一个命令并响应提示。 它不会通过shell处理命令，因此不支持像$HOME这样的变量和，以及&lt;, &gt;, |, ;和&amp;等都是无效的。也就是在command模块中无法使用管道符。 使用要求（在执行模块的主机上） python &gt;= 2.6 pexpect &gt;= 3.3 模块参数名称 必选 默认值 备注chdir no 运行command命令前先cd到这个目录command yes 命令模块执行命令运行echo no 是否回显你的回应字符串responses yes 期望的字符串/正则表达式和字符串的映射来响应。 如果响应是一个列表，则连续的匹配将返回连续的响应。 列表功能是2.1中的新功能。creates no 如果这个参数对应的文件存在，就不运行commandremoves no 如果这个参数对应的文件不存在，就不运行command，与creates参数的作用相反timeout no 30 以秒为单位等待预期时间示例 在远程主机上执行脚本 name: Case insensitve password string matchexpect: command: passwd username responses: (?i)password: &quot;MySekretPa$$word&quot; name: Generic question with multiple different responsesexpect: command: /path/to/custom/command responses: Question: - response1 - response2 - response3 注意事项 如果你想通过shell运行一个命令（比如你正在使用&lt;,&gt;,|等），你必须在命令中指定一个shell，比如/bin/bash -c &quot;/path/to/something | grep else&quot;。 在responses下关键是一个python正则表达式匹配，不区分大小写的搜索用前缀?i。 默认情况下，如果多次遇到问题，则会重复其字符串响应。 如果连续问题匹配需要不同的响应，而不是字符串响应，请使用字符串列表作为响应。 expect模块设计用于简单场景，对于更复杂的需求，应该考虑在shell或script模块中使用expect代码 telnet模块简介 expect模块用于执行一些低级的和脏telnet命令，不通过模块子系统。 它不会通过shell处理命令，因此不支持像$HOME这样的变量和，以及&lt;, &gt;, |, ;和&amp;等都是无效的。也就是在command模块中无法使用管道符。 模块参数名称 必选 默认值 备注command yes 在telnet会话中执行的命令host no remote_addr 要执行命令的主机/目标password yes 登录密码pause no 1 每发出一个命令之间的暂停秒port no 23 远程端口prompts no [u’$’] 发送下一个命令之前预期的提示列表timeout no 30 远程操作超时时间user no remote_user 登录用户示例 在远程主机上执行脚本 name: send configuration commands to IOStelnet: user: cisco password: cisco login_prompt: “Username: “ prompts: - &quot;[&gt;|#]&quot; command: - terminal length 0 - configure terminal - hostname ios01 name: run show commandstelnet: user: cisco password: cisco login_prompt: “Username: “ prompts: - &quot;[&gt;|#]&quot; command: - terminal length 0 - show version 注意事项 如果你想通过shell运行一个命令（比如你正在使用&lt;,&gt;,|等），你必须在命令中指定一个shell，比如/bin/bash -c &quot;/path/to/something | grep else&quot;。 在responses下关键是一个python正则表达式匹配，不区分大小写的搜索用前缀?i。 默认情况下，如果多次遇到问题，则会重复其字符串响应。 如果连续问题匹配需要不同的响应，而不是字符串响应，请使用字符串列表作为响应。 expect模块设计用于简单场景，对于更复杂的需求，应该考虑在shell或script模块中使用expect代码 作者：hoxis链接：https://www.jianshu.com/p/8661c107448d來源：简书","categories":[],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://kingle.我爱你/tags/ansible/"}]},{"title":"运维工程师必备命令","slug":"运维工程师必备命令","date":"2018-08-28T09:17:28.000Z","updated":"2018-08-28T09:23:24.495Z","comments":true,"path":"2018/08/28/运维工程师必备命令/","link":"","permalink":"https://kingle.我爱你/2018/08/28/运维工程师必备命令/","excerpt":"","text":"###1.ls [选项] [目录名 | 列出相关目录下的所有目录和文件 -a 列出包括.a开头的隐藏文件的所有文件-A 通-a，但不列出”.”和”..”-l 列出文件的详细信息-c 根据ctime排序显示-t 根据文件修改时间排序—color[=WHEN] 用色彩辨别文件类型 WHEN 可以是’never’、’always’或’auto’其中之一 白色：表示普通文件 蓝色：表示目录 绿色：表示可执行文件 红色：表示压缩文件 浅蓝色：链接文件 红色闪烁：表示链接的文件有问题 黄色：表示设备文件 灰色：表示其它文件 ###2.mv [选项] 源文件或目录 目录或多个源文件 | 移动或重命名文件 -b 覆盖前做备份-f 如存在不询问而强制覆盖-i 如存在则询问是否覆盖-u 较新才覆盖-t 将多个源文件移动到统一目录下，目录参数在前，文件参数在后eg: mv a /tmp/ 将文件a移动到 /tmp目录下 mv a b 将a命名为b mv /home/zenghao test1.txt test2.txt test3.txt ###3.cp [选项] 源文件或目录 目录或多个源文件 | 将源文件复制至目标文件，或将多个源文件复制至目标目录。 -r -R 递归复制该目录及其子目录内容-p 连同档案属性一起复制过去-f 不询问而强制复制-s 生成快捷方式-a 将档案的所有特性都一起复制 ###4.scp [参数] [原路径] [目标路径] | 在Linux服务器之间复制文件和目录 -v 详细显示输出的具体情况-r 递归复制整个目录(1) 复制文件：命令格式：scp local_file remote_username@remote_ip:remote_folder或者scp local_file remote_username@remote_ip:remote_file或者scp local_file remote_ip:remote_folder或者scp local_file remote_ip:remote_file第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名(2) 复制目录：命令格式：scp -r local_folder remote_username@remote_ip:remote_folder或者scp -r local_folder remote_ip:remote_folder第1个指定了用户名，命令执行后需要输入用户密码；第2个没有指定用户名，命令执行后需要输入用户名和密码；eg: 从 本地 复制到 远程 scp /home/daisy/full.tar.gz root@172.19.2.75:/home/root 从 远程 复制到 本地 scp root@/172.19.2.75:/home/root/full.tar.gz /home/daisy/full.tar.gz ###5.rm [选项] 文件 | 删除文件 -r 删除文件夹-f 删除不提示-i 删除提示-v 详细显示进行步骤 ###6.touch [选项] 文件 | 创建空文件或更新文件时间 -a 只修改存取时间-m 值修改变动时间-r eg:touch -r a b ,使b的时间和a相同-t 指定特定的时间 eg:touch -t 201211142234.50 log.log -t time [[CC]YY]MMDDhhmm[.SS],C:年前两位 ###7.pwd 查看当前所在路径 ###8.cd 改变当前目录 ：返回上层目录.. :返回上层目录回车 ：返回主目录/ :根目录 ###9.mkdir [选项] 目录… | 创建新目录 -p 递归创建目录，若父目录不存在则依次创建-m 自定义创建目录的权限 eg:mkdir -m 777 hehe-v 显示创建目录的详细信息 ###10.rmdir 删除空目录 -v 显示执行过程-p 若自父母删除后父目录为空则一并删除 ###11.rm [选项] 文件… | 一个或多个文件或目录 -f 忽略不存在的文件，不给出提示-i 交互式删除-r 将列出的目录及其子目录递归删除-v 列出详细信息 ###12.echo：显示内容 -n 输出后不换行-e 遇到转义字符特殊处理 eg: echo “he\\nhe” 显示he\\nhe ehco -e “he\\nhe” 显示he(换行了)he ###13.cat [选项] [文件]..| 一次显示整个文件或从键盘创建一个文件或将几个文件合并成一个文件 -n 编号文件内容再输出-E 在结束行提示$ ###14.tac | 反向显示 ###15.more | 按页查看文章内容，从前向后读取文件，因此在启动时就加载整个文件 +n 从第n行开始显示-n 每次查看n行数据+/String 搜寻String字符串位置，从其前两行开始查看-c 清屏再显示-p 换页时清屏 ###16.less | 可前后移动地逐屏查看文章内容，在查看前不会加载整个文件 -m 显示类似于more命令的百分比-N 显示行号/ 字符串：向下搜索“字符串”的功能? 字符串：向上搜索“字符串”的功能n 重复前一个搜索（与 / 或 ? 有关）N 反向重复前一个搜索（与 / 或 ? 有关）b 向后翻一页d 向后翻半页 ###17.nl [选项]… [文件]… | 将输出内容自动加上行号 -b-b a 不论是否有空行，都列出行号（类似 cat -n)-b t 空行则不列行号（默认）-n 有ln rn rz三个参数，分别为再最左方显示，最右方显示不加0，最右方显示加0 ###18.head [参数]… [文件]… | 显示档案开头，默认开头10行 -v 显示文件名-c number 显示前number个字符,若number为负数,则显示除最后number个字符的所有内容-number/n (+)number 显示前number行内容，-n number 若number为负数，则显示除最后number行数据的所有内容 ###19.tail [必要参数] [选择参数] [文件] | 显示文件结尾内容 -v 显示详细的处理信息-q 不显示处理信息-num/-n (-)num 显示最后num行内容-n +num 从第num行开始显示后面的数据-c 显示最后c个字符-f 循环读取 ###20.vi 编辑文件 :w filename 将文章以指定的文件名保存起来:wq 保存并退出:q! 不保存而强制退出命令行模式功能键1）插入模式 按「i」切换进入插入模式「insert mode」，按”i”进入插入模式后是从光标当前位置开始输入文件； 按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字； 按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。 2）从插入模式切换为命令行模式 按「ESC」键。3）移动光标 vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。 按「ctrl」+「b」：屏幕往”后”移动一页。 按「ctrl」+「f」：屏幕往”前”移动一页。 按「ctrl」+「u」：屏幕往”后”移动半页。 按「ctrl」+「d」：屏幕往”前”移动半页。 按数字「0」：移到文章的开头。 按「G」：移动到文章的最后。 按「$」：移动到光标所在行的”行尾”。 按「^」：移动到光标所在行的”行首” 按「w」：光标跳到下个字的开头 按「e」：光标跳到下个字的字尾 按「b」：光标回到上个字的开头 按「#l」：光标移到该行的第#个位置，如：5l,56l。 4）删除文字 「x」：每按一次，删除光标所在位置的”后面”一个字符。 「#x」：例如，「6x」表示删除光标所在位置的”后面”6个字符。 「X」：大写的X，每按一次，删除光标所在位置的”前面”一个字符。 「#X」：例如，「20X」表示删除光标所在位置的”前面”20个字符。 「dd」：删除光标所在行。 「#dd」：从光标所在行开始删除#行 5）复制 「yw」：将光标所在之处到字尾的字符复制到缓冲区中。 「#yw」：复制#个字到缓冲区 「yy」：复制光标所在行到缓冲区。 「#yy」：例如，「6yy」表示拷贝从光标所在的该行”往下数”6行文字。 「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与”y”有关的复制命令都必须与”p”配合才能完成复制与粘贴功能。 6）替换 「r」：替换光标所在处的字符。 「R」：替换光标所到之处的字符，直到按下「ESC」键为止。 7）回复上一次操作 「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次”u”可以执行多次回复。 8）更改 「cw」：更改光标所在处的字到字尾处 「c#w」：例如，「c3w」表示更改3个字 9）跳至指定的行 「ctrl」+「g」列出光标所在行的行号。 「#G」：例如，「15G」，表示移动光标至文章的第15行行首。 ###21.which 可执行文件名称 | 查看可执行文件的位置，在PATH变量指定的路径中查看系统命令是否存在及其位置 ###22.whereis [-bmsu] [BMS 目录名 -f ] 文件名| 定位可执行文件、源代码文件、帮助文件在文件系统中的位置 -b 定位可执行文件。-m 定位帮助文件。-s 定位源代码文件。-u 搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。-B 指定搜索可执行文件的路径。-M 指定搜索帮助文件的路径。-S 指定搜索源代码文件的路径。 ###23.locate | 通过搜寻数据库快速搜寻档案 -r 使用正规运算式做寻找的条件 ###24.find find [PATH] [option] [action] | 在文件树种查找文件，并作出相应的处理 选项与参数： 与时间有关的选项：共有 -atime, -ctime 与 -mtime 和-amin,-cmin与-mmin，以 -mtime 说明-mtime n ：n 为数字，意义为在 n 天之前的『一天之内』被更动过内容的档案；-mtime +n ：列出在 n 天之前(不含 n 天本身)被更动过内容的档案档名；-mtime -n ：列出在 n 天之内(含 n 天本身)被更动过内容的档案档名。-newer file ：file 为一个存在的档案，列出比 file 还要新的档案档名 与使用者或组名有关的参数：-uid n ：n 为数字，这个数字是用户的账号 ID，亦即 UID-gid n ：n 为数字，这个数字是组名的 ID，亦即 GID-user name ：name 为使用者账号名称！例如 dmtsai-group name：name 为组名，例如 users ；-nouser ：寻找档案的拥有者不存在 /etc/passwd 的人！-nogroup ：寻找档案的拥有群组不存在于 /etc/group 的档案！ 与档案权限及名称有关的参数：-name filename：搜寻文件名为 filename 的档案（可使用通配符）-size [+-]SIZE：搜寻比 SIZE 还要大(+)或小(-)的档案。这个 SIZE 的规格有： c: 代表 byte k: 代表 1024bytes。所以，要找比 50KB还要大的档案，就是『 -size +50k 』 -type TYPE ：搜寻档案的类型为 TYPE 的，类型主要有： 一般正规档案 (f) 装置档案 (b, c) 目录 (d) 连结档 (l) socket (s) FIFO (p) -perm mode ：搜寻档案权限『刚好等于』 mode的档案，这个mode为类似chmod的属性值，举例来说，-rwsr-xr-x 的属性为4755！-perm -mode ：搜寻档案权限『必须要全部囊括 mode 的权限』的档案，举例来说， 我们要搜寻-rwxr--r-- 亦即 0744 的档案，使用-perm -0744，当一个档案的权限为 -rwsr-xr-x ，亦即 4755 时，也会被列出来，因为 -rwsr-xr-x 的属性已经囊括了 -rwxr--r-- 的属性了。 -perm +mode ：搜寻档案权限『包含任一 mode 的权限』的档案，举例来 说，我们搜寻-rwxr-xr-x ，亦即 -perm +755 时，但一个文件属性为 -rw-------也会被列出来，因为他有 -rw.... 的属性存在！ 额外可进行的动作：-exec command ：command 为其他指令，-exec 后面可再接额外的指令来处理搜寻到的结果。-print ：将结果打印到屏幕上，这个动作是预设动作！eg:find / -perm +7000 -exec ls -l {} \\; ,额外指令以-exec开头，以\\;结尾{}代替前面找到的内容 | xargs -i 默认的前面输出用{}代替 eg: find . -name &quot;*.log&quot; | xargs -i mv {} test4 #grep ‘正则表达式’ 文件名 | 用正则表达式搜索文本，并把匹配的行打印出来 -c 只输出匹配行的计数。-I 不区分大小写(只适用于单字符)。-l 只显示文件名-v 显示不包含匹配文本的所有行。-n 显示匹配行数据及其行号 ###25.file | 判断文件类型 ###26.gzip [-cdtv#] 檔名 | 压缩、解压缩，源文件都不再存在 -d 进行解压缩-c 将压缩的数据输出到屏幕上-v :显示原档案/压缩文件案的压缩比等信息-# ：压缩等级，-1最快，但压缩比最差，=9最慢，但压缩比最好 ###27.gunzip | 解压缩 ###28.bzip2 | 压缩、解压缩 -d :解压-z :压缩-k :保留源文件-c ：将压缩的过程产生的数据输出到屏幕上！-v ：可以显示出原档案/压缩文件案的压缩比等信息；-# ：与 gzip 同样的，都是在计算压缩比的参数， -9 最佳， -1 最快！ ###29.bzcat 读取数据而无需解压 ###30.tar [主选项+辅选项] 文件或者目录 | 多个目录或档案打包、压缩成一个大档案 主选项： -c 建立打包档案，可搭配 -v 来察看过程中被打包的档名(filename) -t 察看打包档案的内容含有哪些档名，重点在察看『档名』就是了； -x 解打包或解压缩的功能，可以搭配 -C (大写) 在特定目录解开辅选项： -j 透过 bzip2 的支持进行压缩/解压缩：此时档名最好为 .tar.bz2 -z 透过 gzip 的支持进行压缩/解压缩：此时档名最好为 .tar.gz -v 在压缩/解压缩的过程中，将正在处理的文件名显示出来！ -f filename -f 后面要立刻接要被处理的档名！ -C 目录 这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。 –exclude FILE：在压缩打包过程中忽略某文件 eg: tar –exclude /home/zenghao -zcvf myfile.tar.gz /home/* /etc -p 保留备份数据的原本权限与属性，常用于备份(-c)重要的配置文件 -P(大写） 保留绝对路径，亦即允许备份数据中含有根目录存在之意；eg: 压 缩：tar -jcvf filename.tar.bz2 要被压缩的档案或目录名称 查 询：tar -jtvf filename.tar.bz2 解压缩：tar -jxvf filename.tar.bz2 -C 欲解压缩的目录 ###31.exit 退出当前shell ###32.logout 退出登录shell ###33.shutdown -h now ###34.users 显示当前登录系统地用户 ###35.who 登录在本机的用户与来源 -H或–heading 显示各栏位的标题信息列。 ###36.w 登录在本机的用户及其运行的程序 -s 使用简洁格式列表，不显示用户登入时间，终端机阶段作业和程序所耗费的CPU时间。-h 不显示各栏位的标题信息列。 ###37.write 给当前联机的用户发消息 ###38.wall 给所有登录再本机的用户发消息 ###39.last 查看用户的登陆日志 ###40.lastlog 查看每个用户最后的登陆时间 ###41.finger [选项] [使用者] [用户@主机] | 查看用户信息 -s 显示用户的注册名、实际姓名、终端名称、写状态、停滞时间、登录时间等信息-l 除了用-s选项显示的信息外，还显示用户主目录、登录shell、邮件状态等信息，以及用户主目录下的.plan、.project和.forward文件的内容。-p 除了不显示.plan文件和.project文件以外，与-l选项相同 ###42.hostname 查看主机名 ###43.alias ii = “ls -l” | 添加别名 ###44.unalias ii | 清除别名 ###45.useradd [-u UID] [-g 初始群组] [-G 次要群组] [-c 说明栏] [-d 家目录绝对路径] [-s shell] 使用者账号名 | 新增用户 -M 不建立用户家目录！(系统账号默认值)-m 建立用户家目录！(一般账号默认值)-r 建立一个系统的账号，这个账号的 UID 会有限制-e 账号失效日期，格式为『YYYY-MM-DD』-D 查看useradd的各项默认值 ###46.passwd | 修改密码 -l 使密码失效-u 与-l相对，用户解锁-S 列出登陆用户passwd文件内的相关参数-n 后面接天数，shadow 的第 4 字段，多久不可修改密码天数-x 后面接天数，shadow 的第 5 字段，多久内必须要更动密码-w 后面接天数，shadow 的第 6 字段，密码过期前的警告天数-i 后面接『日期』，shadow 的第 7 字段，密码失效日期使用管道刘设置密码：echo “zeng” | passwd –stdin zenghao ###47.userdel 删除用户 -r 用户文件一并删除 ###48.chage [-ldEImMW] 账号名 | 修改用户密码的相关属性 -l 列出该账号的详细密码参数；-d 后面接日期，修改 shadow 第三字段(最近一次更改密码的日期)，格式YYYY-MM-DD-E 后面接日期，修改 shadow 第八字段(账号失效日)，格式 YYYY-MM-DD-I 后面接天数，修改 shadow 第七字段(密码失效日期)-m 后面接天数，修改 shadow 第四字段(密码最短保留天数)-M 后面接天数，修改 shadow 第五字段(密码多久需要进行变更)-W 后面接天数，修改 shadow 第六字段(密码过期前警告日期) ###49.usermod [-cdegGlsuLU] username | 修改用户的相关属性 -c 后面接账号的说明，即 /etc/passwd 第五栏的说明栏，可以加入一些账号的说明。-d 后面接账号的家目录，即修改 /etc/passwd 的第六栏；-e 后面接日期，格式是 YYYY-MM-DD 也就是在 /etc/shadow 内的第八个字段数据啦！-f 后面接天数为 shadow 的第七字段。-g 后面接初始群组，修改 /etc/passwd 的第四个字段，亦即是GID的字段！-G 后面接次要群组，修改这个使用者能够支持的群组-l 后面接账号名称。亦即是修改账号名称， /etc/passwd 的第一栏！-s 后面接 Shell 的实际档案，例如 /bin/bash 或 /bin/csh 等等。-u 后面接 UID 数字啦！即 /etc/passwd 第三栏的资料；-L 冻结密码-U 解冻密码 ###50.id [username] | 查看用户相关的id信息，还可以用来判断用户是否存在 ###51.groups 查看登陆用户支持的群组， 第一个输出的群组为有效群组 ###52.newgrp 切换有效群组 ###53.groupadd [-g gid] 组名 | 添加组 -g 设定添加组的特定组id ###54.groupmod [-g gid] [-n group_name] 群组名 | 修改组信息 -g 修改既有的 GID 数字-n 修改既有的组名 ###55.groupdel [groupname] | 删除群组 ###56.gpasswd | 群组管理员功能 root管理员动作： -gpasswd groupname 设定密码 -gpasswd [-A user1,…] [-M user3,…] groupname -A 将 groupname 的主控权交由后面的使用者管理(该群组的管理员) -M 将某些账号加入这个群组当中 -gpasswd [-r] groupname -r 将 groupname 的密码移除群组管理员动作： gpasswd [-ad] user groupname -a 将某位使用者加入到 groupname 这个群组当中 -d 将某位使用者移除出 groupname 这个群组当中 ###57.chfn修改个人信息 ###58.mount [-t vfstype] [-o options] device dir -ro 采用只读方式挂接设备-rw 采用读写方式挂接设备eg:mount /home/mydisk.iso /tmp/mnt 通过mnt访问mydisk内的内容 ###59.umount 取消挂载 ###60.cut -b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。-c ：以字符为单位进行分割。-d ：自定义分隔符，默认为制表符。-f ：与-d一起使用，指定显示哪个区域。 ###61.sort -n 依照数值的大小排序。-o&lt;输出文件&gt; 将排序后的结果存入指定的文件。-r 以相反的顺序来排序。-t&lt;分隔字符&gt; 指定排序时所用的栏位分隔字符。-k 选择以哪个区间进行排序。 ###62.wc 统计指定文件中的字节数、字数、行数, 并将统计结果显示输出 -l filename 报告行数-c filename 报告字节数-m filename 报告字符数-w filename 报告单词数 ###63.uniq 去除文件中相邻的重复行 -c或——count：在每列旁边显示该行重复出现的次数；-d或–repeated：仅显示重复出现的行列；-f&lt;栏位&gt;或–skip-fields=&lt;栏位&gt;：忽略比较指定的栏位；-s&lt;字符位置&gt;或–skip-chars=&lt;字符位置&gt;：忽略比较指定的字符；-u或——unique：仅显示出一次的行列；-w&lt;字符位置&gt;或–check-chars=&lt;字符位置&gt;：指定要比较的字符。 ###64.set 显示环境变量和普通变量 ###65.env 显示环境变量 ###66.export 把普通变量变成环境变量 ###67.unset 删除一个环境变量 aaa(){} 定义函数 ###68.read -p 接提示字符-t 接等待的秒数 ###69.declare、typeset -i 声明为整数-a 声明为数组-f 声明为函数-r 声明为只读 ###70.ulimit 限制使用者的某些系统资源 -f 此 shell 可以建立的最大档案容量 (一般可能设定为 2GB)单位为 Kbytes eg: ulimit -f 1024 限制使用者仅能建立 1MBytes 以下的容量的档案 ###71.df [选项] [文件] | 显示指定磁盘文件的可用空间,如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示 -a 显示全部文件系统-h 文件大小友好显示-l 只显示本地文件系统-i 显示inode信息-T 显示文件系统类型 ###72.du [选项] [文件] | 显示每个文件和目录的磁盘使用空间 -h 方便阅读的方式-s 只显示总和的大小 ###73.ln [参数] [源文件或目录] [目标文件或目录] | 某一个文件在另外一个位置建立一个同步的链接 -s 建立软连接-v 显示详细的处理过程 ###74.diff [参数] [文件1或目录1] [文件2或目录2] | 比较单个文件或者目录内容 -b 不检查空格字符的不同。-B 不检查空白行。-i 不检查大小写-q 仅显示差异而不显示详细信息eg: diff a b &gt; parch.log 比较两个文件的不同并产生补丁 ###75.date [参数]… [+格式] | 显示或设定系统的日期与时间 %H 小时(以00-23来表示)。%M 分钟(以00-59来表示)。%P AM或PM。%D 日期(含年月日)%U 该年中的周数。date -s “2015-10-17 01:01:01″ //时间设定date +%Y%m%d //显示前天年月日date +%Y%m%d –date=”+1 day/month/year” //显示前一天/月/年的日期date +%Y%m%d –date=”-1 day/month/year” //显示后一天/月/年的日期date -d ‘2 weeks’ 2周后的日期 ###76.cal [参数] 月份 [年份] | 查看日历 -1 显示当月的月历-3 显示前、当、后一个月的日历-m 显示星期一为一个星期的第一天-s （默认）星期天为第一天-j 显示当月是一年中的第几天的日历-y 显示当前年份的日历 ###77.ps | 列出当前进程的快照 a 显示所有的进程-a 显示同一终端下的所有程序e 显示环境变量f 显示进程间的关系-H 显示树状结构r 显示当前终端的程序T 显示当前终端的所有程序-au 显示更详细的信息-aux 显示所有包含其他使用者的行程-u 指定用户的所有进程 ###78.top [参数] | 显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等 ###79.kill [参数] [进程号] | 杀死进程 ###80.free [参数] | 显示linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer ###81.vmstat | 对操作系统的虚拟内存、进程、CPU活动进行监控 ###82.iostat [参数] [时间t] 次数n| 对系统的磁盘操作活动进行监视,汇报磁盘活动统计情况，同时也会汇报出CPU使用情况 -p[磁盘] 显示磁盘和分区的情况 ###83.watch [参数] [命令] |重复执行某一命令以观察变化 -n 时隔多少秒刷新-d 高亮显示动态变化 ###84.at [参数] [时间] | 在一个指定的时间执行一个指定任务，只能执行一次 HH:MM[am|pm] + number [minutes|hours|days|weeks] 强制在某年某月某日的某时刻进行该项任务atq 查看系统未执行的任务atrm n 删除编号为n的任务at -c n 显示编号为n的任务的内容 ###85.crontab | 定时任务调度 file 载入crontab-e 编辑某个用户的crontab文件内容-l 显示某个用户的crontab文件内容-r 删除某个用户的crontab文件 ###86.ifconfig [网络设备] [参数] | 查看和配置网络设备 ###87.route | 显示和操作IP路由表 ###88.ping [参数] [主机名或IP地址] | 测试与目标主机的连通性 -q 只显示最后的结果 ###89.netstat | 显示与IP、TCP、UDP和ICMP协议相关的统计数据 ###90.telnet [参数] [主机] | 用于远程登录，采用明文传送报文，安全性不好 ###91.rcp [参数] [源文件] [目标文件] | 远程文件拷贝 -r 递归复制-p 保留源文件的属性usage: rcp –r remote_hostname:remote_dir local_dir ###92.wget [参数] [URL地址] | 直接从网络上下载文件 -o FILE 把记录写到FILE文件中 eg : wget -O a.txt URLwget –limit-rate=300k URL 限速下载 ###93.awk -F 分隔符 以分隔符分隔内容{} 要执行的脚本内容 eg:cat /etc/passwd |awk -F ‘:’ ‘{print $1”\\t”$7}’ ###94.sed 对数据行进行替换、删除、新增、选取等操作 a 新增，在新的下一行出现c 取代，取代 n1,n2 之间的行 eg: sed ‘1,2c Hi’ abd 删除i 插入，在新的上一行出现 ###95.paste 合并文件，需确保合并的两文件行数相同 -d 指定不同于空格或tab键的域分隔符-s 按行合并，单独一个文件为一行 ###96.su [参数] user | 切换登陆 -l 切换时连同环境变量、工作目录一起改变-c command 执行command变回原来的使用者 ###97.sudo | 以特定用户的权限执行特定命令 -l 列出当前用户可执行的命令-u username#uid 以指定用户执行命令","categories":[],"tags":[{"name":"命令 运维","slug":"命令-运维","permalink":"https://kingle.我爱你/tags/命令-运维/"}]},{"title":"nginx 安装与排错","slug":"nginx-安装与排错","date":"2018-07-16T09:25:23.000Z","updated":"2018-07-16T09:26:32.126Z","comments":true,"path":"2018/07/16/nginx-安装与排错/","link":"","permalink":"https://kingle.我爱你/2018/07/16/nginx-安装与排错/","excerpt":"","text":"一， 安装 nginx 所需要的pcre库 即：perl 兼容正则表达式 yum install pcre pcre-devel -y rpm -qa pcre pcre-devel 检查是否安装好pcre-devel，openssl-devel， rpm -qa pcre-devel pcre [root@kingle0001 ~]# rpm -qa openssl-devel openssl openssl-devel-1.0.1e-57.el6.x86_64 openssl-1.0.1e-57.el6.x86_64 rpm -qa openssl-devel openssl [root@kingle0001 ~]# rpm -qa openssl-devel openssl openssl-1.0.1e-57.el6.x86_64 少了一个 开始安装Nginx 下载：wegt -q http://nginx.org/download/nginx-1.15.1.tar.gz useradd nginx -s /sbin/nologin -M tar -zxvf nginx-1.6.3.tar.gz cd nginx-1.15.1 ./configure --user=nginx --group=nginx --prefix=/application/nginx-1.15.1/ --with-http_stub_status_module --with-http_ssl_module make make install ln -s /application/nginx-1.15.1 /application/nginx/ 启动： /application/nginx/nginx-1.15.1/sbin/nginx 二，nginx进不去欢迎界面解决方法 一：关闭selinux setenforce 0 临时关闭 永久关闭编辑文件/etc/selinux/config 关闭防火墙 /etc/init.d/iptables stop 关闭防火墙 chkconfig iptables off 开机自启关闭 /etc/init.d/iptabes status 查看防火墙当前状态 查看80端口信息 netstat -lnt|grep 80 查看nginx进程 ps-ef|grep nginx 查看nginx的错误日志 cat /application/nginx/nginx-1.15.1/error.log ping 10.0.0.200 看是否联通 wegt 10.0.0.200 或者curl -I 10.0.0.200 模拟用户访问 三， 编辑 html ： vim /application/nginx/nginx-1.15.1/html/index.html （所以说还是需要html知识的）","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://kingle.我爱你/tags/nginx/"}]},{"title":"单引号，双引号，反引号区别","slug":"单引号，双引号，反引号区别","date":"2018-07-16T06:46:01.000Z","updated":"2018-07-16T07:14:51.064Z","comments":true,"path":"2018/07/16/单引号，双引号，反引号区别/","link":"","permalink":"https://kingle.我爱你/2018/07/16/单引号，双引号，反引号区别/","excerpt":"","text":"你可能一直在纠结这三种符号的区别，看完我的你就不要走出去还说不回了哈，，，， 1，单引号 ‘’ ： 强引用 任何变量($var)、特殊转义字符(如“\\t \\r \\n”等)不会被解析， 因此PHP的解析速度更快，转义字符仅仅支持“\\’”和“\\”这样 对单引号和反斜杠本身的转义. 例如： 创建变量： [root@kingle0001 ~]# A=100 [root@kingle0001 ~]# B=ls [root@kingle0001 ~]# echo a a [root@kingle0001 ~]# echo A A [root@kingle0001 ~]# echo ‘A’ A [root@kingle0001 ~]# echo ‘$A’ $A [root@kingle0001 ~]# echo ‘$B’ $B 可以看出单引号里面的不管是字符还是变量给啥出啥 2， 双引号：弱引用 [root@kingle0001 ~]# echo “$A” 100 [root@kingle0001 ~]# echo “$B” ls 可以看到只解析变量3，反引号: 命令替换 [root@kingle0001 ~]# echo $A -bash: 100: command not found [root@kingle0001 ~]# echo `$B` 123 anaconda-ks.cfg cookie.txt 只解析命令。而变量给出字符串不予解析","categories":[],"tags":[{"name":"单引号，双引号，反引号","slug":"单引号，双引号，反引号","permalink":"https://kingle.我爱你/tags/单引号，双引号，反引号/"}]},{"title":"高并发文件描述符之ulimit","slug":"高并发之ulimit","date":"2018-07-14T08:22:14.000Z","updated":"2018-07-14T08:24:20.358Z","comments":true,"path":"2018/07/14/高并发之ulimit/","link":"","permalink":"https://kingle.我爱你/2018/07/14/高并发之ulimit/","excerpt":"","text":"ulimit命令 主要是用来限制系统用户对shell资源的访问或许这样你并不了解ulimit 0.0: 假设有这样一种情况，当一台 Linux 主机上同时登陆了 10 个人，在系统资源无限制的情况下，这 10 个用户同时打开了 500 个文档，而假设每个文档的大小有 10M，这时系统的内存资源就会受到巨大的挑战。 而实际应用的环境要比这种假设复杂的多，例如在一个嵌入式开发环境中，各方面的资源都是非常紧缺的，对于开启文件描述符的数量，分配堆栈的大 小，CPU 时间，虚拟内存大小，等等，都有非常严格的要求。资源的合理限制和分配，不仅仅是保证系统可用性的必要条件，也与系统上软件运行的性能有着密不可分的联 系。这时，ulimit 可以起到很大的作用，它是一种简单并且有效的实现资源限制的方式。 ulimit 用于限制 shell 启动进程所占用的资源，支持以下各种类型的限制：所创建的内核文件的大小、进程数据块的大小、Shell 进程创建文件的大小、内存锁住的大小、常驻内存集的大小、打开文件描述符的数量、分配堆栈的最大大小、CPU 时间、单个用户的最大线程数、Shell 进程所能使用的最大虚拟内存。同时，它支持硬资源和软资源的限制。 作为临时限制，ulimit 可以作用于通过使用其命令登录的 shell 会话，在会话终止时便结束限制，并不影响于其他 shell 会话。而对于长期的固定限制，ulimit 命令语句又可以被添加到由登录 shell 读取的文件中，作用于特定的 shell ulimit ：-a：显示目前资源限制的设定； -c &lt;core文件上限&gt;：设定core文件的最大值，单位为区块； -d &lt;数据节区大小&gt;：程序数据节区的最大值，单位为KB； -f &lt;文件大小&gt;：shell所能建立的最大文件，单位为区块； -H：设定资源的硬性限制，也就是管理员所设下的限制； -m &lt;内存大小&gt;：指定可使用内存的上限，单位为KB； -n &lt;文件数目&gt;：指定同一时间最多可开启的文件数； -p &lt;缓冲区大小&gt;：指定管道缓冲区的大小，单位512字节； -s &lt;堆叠大小&gt;：指定堆叠的上限，单位为KB； -S：设定资源的弹性限制； -t &lt;CPU时间&gt;：指定CPU使用时间的上限，单位为秒； -u &lt;程序数目&gt;：用户最多可开启的程序数目； -v &lt;虚拟内存大小&gt;：指定可使用的虚拟内存上限，单位为KB。 core file size (blocks, -c) 0 #core文件的最大值为100 blocks。 -----&gt;在一个程序崩溃时,它一般会在指定目录下生成一个core文件。core文件仅仅是一个内存映象(同时加上调试信息),主要是用来调试的 data seg size (kbytes, -d) unlimited #进程的数据段可以任意大。 scheduling priority (-e) 0 file size (blocks, -f) unlimited #文件可以任意大。 pending signals (-i) 98304 #最多有98304个待处理的信号。 max locked memory (kbytes, -l) 32 #一个任务锁住的物理内存的最大值为32KB。 max memory size (kbytes, -m) unlimited #一个任务的常驻物理内存的最大值。 open files (-n) 1024 #一个任务最多可以同时打开1024的文件。 pipe size (512 bytes, -p) 8 #管道的最大空间为4096字节。 POSIX message queues (bytes, -q) 819200 #POSIX的消息队列的最大值为819200字节。 real-time priority (-r) 0 stack size (kbytes, -s) 10240 #进程的栈的最大值为10240字节。 cpu time (seconds, -t) unlimited #进程使用的CPU时间。 max user processes (-u) 98304 #当前用户同时打开的进程（包括线程）的最大个数为98304。 virtual memory (kbytes, -v) unlimited #没有限制进程的最大地址空间。 file locks (-x) unlimited #所能锁住的文件的最大个数没有限制。 高并发服务器解决方法一： 在服务高并发服务器来书ulimit -n 1024 这个默认值是完全不够的需要把值调大一点 -----》 echo &apos;* - nofile 65535&apos; &gt;&gt;/etc/secur 方法二： ulimit -SHn 65535","categories":[],"tags":[{"name":"ulimit","slug":"ulimit","permalink":"https://kingle.我爱你/tags/ulimit/"}]},{"title":"linux etc,var文件系统介绍","slug":"linux-etc文件系统介绍","date":"2018-07-13T11:04:51.000Z","updated":"2018-07-13T11:07:39.983Z","comments":true,"path":"2018/07/13/linux-etc文件系统介绍/","link":"","permalink":"https://kingle.我爱你/2018/07/13/linux-etc文件系统介绍/","excerpt":"","text":"1） 目录结构说明：windows：磁盘----分区---格式化--系统 linux：磁盘--分区--生成一个文件（磁盘分区） linux 中一切皆文件 ll -h 显示人类能看懂的 mount -o remount，rw / 安装tree yum install tree -y 查看一级根 tree -L 1 / esc . 快速输入上一个字符串。 etc下重要文件：nfig/network-scripts/ifcfg-eth0 DEVICE=eth0 --&gt; 设备名称eth0 HWADDR=00:0c:29:8c:e2:3b mac地址 TYPE=Ethernet 网络类型 UUID=ffe5f1b3-26ab-4312-a364-c0061f01bbb6 硬件标示id信息 查看分区的命令blkid ONBOOT=yes ------------------&gt; 一定设置yes&apos; 激活网卡（给网卡供电） NM_CONTROLLED=yes 网络控制服务 BOOTPROTO=none 启动协议：获取地址方式 静态 IPADDR=10.0.0.200 网关 NETMASK=255.255.255.0 dns DNS2=223.5.5.5 GATEWAY=10.0.0.2 服务器网卡ip DNS1=114.114.114.114 子网掩码 USERCTL=no PEERDNS=yes 网卡dns配置是否覆盖 IPV6INIT=no ；命令分隔符 &amp;&amp; 前面命令执行成功后在执行后一条命令 2） 重启网0卡 service network restart （字太多不建议使用）/etc/resolv.conf dns网卡配置信息 3）/etc/hosts 主机名称或者域名信息 本机设置域名和ip地址装换关系修改主机名称 的时候要修改这个文件 4）/etc/sysconfig/network用于修改系统主机名信息：配置网关信息 主机名修改步骤： 第一： hostname kingle 修改主机名称不会立即生效 说明：命令修改主机名只是临时生效； 第二：编写配置文件： vim /etc/sysconfig/network 第三：编写/etc/host 配置好主机名于ip地址的关系 5）/etc/fstabfile system mounting table 磁盘 做raid （阵列卡） 进行分区 格式化 文件系统 默认的挂载参数 /dev/cdrom /mnt iso9660 defaults 0 0 cat /proc/mounts 可以看到挂载文件的属性 mount -auto /etc/fstab --&gt; mount -a 6）/etc/rc.local 开机自启将你要的操作执行的命令，直接放入到此文件，可是让操作命令自动开机自启 7）/etc/inittablinux 系统有不同的进入方式，系统的运行级别 0 -halt 关机运行级别 1 - single user mode 单用户级别 2 - multiuser，without NFS 多用户级别，但是不支持nfs （类似3级别但是没有网络） 3 - Full multiuser mode 正常多用户模式 （命令行模式） 4 - unused 未使用级别 5 - X11 图形化界面 （安装oracle） 6 - reboot 重启 8）/etc/init.d (目录)主要用于存放服务的启动和关闭 但是并不是所有的程序都放在这里 系统软件的安装： 1，软件的安装方式（启动脚本会放在etc/init.d） rpm 命令 rpm -ivh -i install -v 显示详细信息 -h 显示信息 yum 优化yum源 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo 3.编译安装是不会放在/etc/inin.d 9） /etc/profile (加载命令的配置信息文件)此文件一般加载配置是环境变量信息或者别名的配置信息 如何让配置环境变量 export （让配置修改环境变量全局生效） 环境变量 PS1 LANG PATH 设置修改PATH环境方法 ll /bin/ -d dr-xr-xr-x. 2 root root 4096 Jul 4 13:30 /bin/ mkdir /bin01 ll /bin01/ -d drwxr-xr-x 2 root root 4096 Jul 13 11:15 /bin01/ mv /bin/cat /bin01/ ll /bin/cat ls: cannot access /bin/cat: No such file or directory ll /bin01/cat -rwxr-xr-x. 1 root root 48568 Mar 23 2017 /bin01/cat cat /etc/hosts -bash: /bin/cat: No such file or directory echo $PATH /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin export PATH=&quot;$PATH:/bin01&quot; echo $PATH /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/bin01 cat /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 10.0.0.200 oldgirl 10）/etc /bashrc 加载命令配置文件11） ~/.bash_profile ~/.bashrc用户家下面 ~/.bash_profile ~/.bashrc （使用优先） /etc 目录下面 /etc/profile etc/bash 全局命令 （其次） souce ==. 11）/ var 目录中保存的信息经常变化 日志文件/var/log/messages --系统日子文件 不断增加 ，对其切割处理 /var/log/secure 记录用户登录信息 tail -f /var/log/secure 实时监控文件信息 -f 如果监控文件被删除了，会停止监控 -F 监控文件删除了，依旧监控 /var/spool 定时任务 /var/spool/cron/root 系统闹钟 /porc /proc/cpuinfo cpu 信息 /proc/meminfo 系统内存 /porc/loadavg 负载信息 ---&gt;uptime 查看负载信息 ： 0.00 0.00 0.00 1/168 7396 一分钟 五分钟 十五分钟 /porc/mounts top 监控系统运行情况","categories":[],"tags":[{"name":"Linux etc var kingle","slug":"Linux-etc-var-kingle","permalink":"https://kingle.我爱你/tags/Linux-etc-var-kingle/"}]},{"title":"linux 删除文件深入了解及任务定时--Linux的闹钟","slug":"linux-删除文件深入了解及任务定时-Linux的闹钟","date":"2018-07-13T11:01:18.000Z","updated":"2018-07-13T11:03:30.287Z","comments":true,"path":"2018/07/13/linux-删除文件深入了解及任务定时-Linux的闹钟/","link":"","permalink":"https://kingle.我爱你/2018/07/13/linux-删除文件深入了解及任务定时-Linux的闹钟/","excerpt":"","text":"1. linux 删除一个文件的权限要看文件所在的目录的权限删除文件需要对对这个目录拥有w权限 修改文件 查看文件的内容需要对文件有rw权限 删除 创建一个文件 需要对文件坐在地目录拥有wx权限 2. chattr 添加隐藏文件 lsattr 查看隐藏权限 append 追加权限 只能追加i 不可毁灭的 无法修改无法删除 对于系统的一些需要保护的文件可以添加 eg：/etc/inittab /etc/passwd /etc/shadow 3. suid 运行莫一个命令的时候相当于root 加特殊权限 chmod u+s /bin/rm 超级危险啊chmod o+t /tmp 粘滞位 --&gt;任何人都可以创建，但是只能自己管理自己的 linux 定时任务！！闹钟！！ atd 运行一次 不用 anacron 非7*24小时的服务器 crond 用户的定时任务，和系统的定时任务 系统定时任务不要求深究 我们用的叫用户定时任务 查看任务 crontab -l cat /var spool/cron/root 编辑任务 crontab -e vim /var spool/cron/root 1，！！定时任务依赖的软件 是否能用 /etc/init.d/crond status 2， 查看crond 是否开机自启 chkconfig | grep crond 3， 查看sshd是否运行 ps-ef |grep sshd 进程：正在运行的程序 守护进程：一直运行的程序 4， crontab 怎么使用： 有语法检查功能 查看任务 crontab -l cat /var spool/cron/root 编辑任务 crontab -e vim /var spool/cron/root 定时文件放置的目录： /var/spool/cron/ 定时任务的日志文件： /var/log/cron 哪些用禁止使用定时任务 /etc/cron/ 定时任务就是什么时间做什么任务! * 每 * * * * * 命令 /n */10 表示每隔十分钟 ntpdate ntp1.aliyun.com crontab -e * * * * * /usr/sbin/ntpdate ntp1.aliyun.com &gt;/dev/null 2&gt;$1 - 00 07-11 * * * cmd 每天上午7点到11点运行一次 每周一周五 凌晨三点到五点的整点和半点 运行 分 时 周 月 周 00，30 03-05 * * 01-05","categories":[],"tags":[{"name":"linux 删除 闹钟","slug":"linux-删除-闹钟","permalink":"https://kingle.我爱你/tags/linux-删除-闹钟/"}]},{"title":"命令","slug":"命令","date":"2018-07-12T11:34:40.000Z","updated":"2018-07-12T11:38:05.069Z","comments":true,"path":"2018/07/12/命令/","link":"","permalink":"https://kingle.我爱你/2018/07/12/命令/","excerpt":"","text":"1,tree-d /etc/ 参数表示只显示目录 -f 显示内容的完整 -i 不显示树枝显示完整路径 2,mkdir-p 递归创建多级目录 -v 显示创建目录的过程 -m 设置目录的默认权限 mkdir -p `cat ~/oldbay.txt` 3,touch-a 只更改指定文件最后访问 -m 修改最后的修改时间 -d 指定文件的修改时间 4,stat查看文件的时间搓 5,ls-l 详细信息 -a 显示隐藏文件 -t 根据时间排序 -F 文件类型 * 代表普通文件 / 代表目录 = 代表套接字（socket） | ------ @ 符号链接 -i 显示inode节点 --time-style=long-iso 显示完整的时间属性 -lhi含义 第一列：inode 索引节点编号 第二列：文件类型属性 第三列：硬链接个数 第四列：文件所属的用户 第五列：文件所属的组 第六列：文件的大小 6,cp-p 复制文件保持源文件属性 -d 符号链接 -r 递归复制 -a 上面总和 -i 覆盖前提示 -t 颠倒格式 7,mv-f 不提示覆盖 -i 询问覆盖 -n 不覆盖已存在的文件 -t 源文件和目标文件对调 8,rm-f 强制删除 -i 删除前提示 -I 删除文件过多需要提示 -r 递归删除 9,rmdir-p 递归删除目录 -v 显示命令执行的过程 10,in-s 创建软连接（符号链接） 11,findpathname :路径 Options 模块 -depth 从指定目录下最深的子目录 -maxdepth levels Tests模块 -atime 按照文件的访问时间查找文件 -type b 块设备文件 c 字符设备文件 d 目录 p 管道文件 l 符号链接 f 普通文件 $ socket 文件 D door actions模块 -delete 讲查找的文件删除 -exec 对匹配的文件执行改参数给出的shell命令 -ok 和-exec作用相同 -print 讲匹配的文件输出到标准输出 ！取反 忽略目录：find /data \\(/data/dir2 -o -path /data/dirs \\) -prune -o -print 12,xargs-n 指定每行最大参数量 -d 自定义分隔符 -i 以{}代替前面的结果 -I 指定一个符号代替前面的结果 -p 提示用户是否执行 13,renamerename form to file form 代表需要提哈U呢或者处理的字符 to 把前面的from 代表内容替换我to的代表内容 file 待处理的文件 14,dasename显示文件名或目录名 用于去除文件后缀部分 15,dirname显示文件或者目录路径 16,chattr [option 选项] [mode 模式] [files 问价或者路径]改变文件扩展属性 -R 递归更改目录属性 -V 显示命令执行的过程 mode项： + 增加参数 - 移除参数 = 跟新为指定参数 A 告诉系统不要修改这个文件的最后访问时间 a 只能向文件添加数据，不能删除更改或者删除 i 设定文件锁定不允许操作 17,lsattr [option 选项] [file 目标 文件]-R 递归查看目录的扩展属性 -a 显示所有文件包括隐藏文件的扩展属性 -d 显示目录的扩展属性 18,file [option 选项] [file 目标 文件]-b 输出信息使用精简格式 19,md5sum","categories":[],"tags":[]},{"title":"linux系统优化基础","slug":"linux系统优化基础","date":"2018-07-11T11:19:29.000Z","updated":"2018-07-11T11:34:36.663Z","comments":true,"path":"2018/07/11/linux系统优化基础/","link":"","permalink":"https://kingle.我爱你/2018/07/11/linux系统优化基础/","excerpt":"","text":"1， 查看centos版本：cat etc/redhat-release看看centos架构信息：uname -m 查看内核信息：uname -r -r 显示内核信息 -m 显示系统架构信息 -a 显示系统所欲信息 -n 网络节点主机 2， ctrl+ L 清屏操作ctrl＋ｄ 退出当前用户 ｃｔｒｌ ＋ ｃ 结束操作 3， 创建用户 useradd创建密码 ｐａｓｓｗｄ 免交互设置密码 echo“” |passwd --stdin oldgilr 切换： su 不指定用户默认root su - su 进入的普通用户后 环境变量还是原本用户的变量及pwd后 显示的是/root su - 进入普通用户原本的环境变量也会改变 及pwd显示是 /home/kingle ### 4, 查看当前用户whoami 5，如果用户需要重置密码，需要以root用户重置root草鸡管理员 其他普通用户只能独立访问长度 6， export PS1=”[\\u@\\h \\w\\A]\\$ “\\u--&gt;root \\h--&gt;标示 \\w-&gt;当前路径 \\A--时间 7，系统优化：selinux 关闭：临时关闭： setenforce service selinux stop enforcing - selinux 服务器处于开启状态 permisssive- 临时关闭，有问一题还会报告 disable -- 临时关闭 永久关闭：selinux 修改自己的配置文件生效 iptables /etc/init.d 目录存放服务程序的脚本文件 chkconfig 设置系统的各种服务 chkconfig iptables off 关闭服务 系统乱码：修改一个字符集的环境变量 临时修改 echo $LANG LANG=en_US.UTF-8 ------&gt;正确的设定 永久修改 export LANG=en_US.UTF-8 &gt;&gt;/etc/profile vim /etc/sysconfig/i18n 修改生效 source /etc/sysconfig/i18n source 经常可以加载的配置文件 /etc/profile /etc/bashrc ~/.bash_profile ~/.bashrc /etc/sysconfig/i18n","categories":[],"tags":[{"name":"linux 优化 kingle","slug":"linux-优化-kingle","permalink":"https://kingle.我爱你/tags/linux-优化-kingle/"}]}]}